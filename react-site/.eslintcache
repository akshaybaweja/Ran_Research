[{"/Users/akshaybaweja/Desktop/Workspace/Ran/Ran_Research/react-site/src/index.js":"1","/Users/akshaybaweja/Desktop/Workspace/Ran/Ran_Research/react-site/src/reportWebVitals.js":"2","/Users/akshaybaweja/Desktop/Workspace/Ran/Ran_Research/react-site/src/App.js":"3","/Users/akshaybaweja/Desktop/Workspace/Ran/Ran_Research/react-site/src/components/homepageimage.js":"4","/Users/akshaybaweja/Desktop/Workspace/Ran/Ran_Research/react-site/src/components/nav-left.js":"5","/Users/akshaybaweja/Desktop/Workspace/Ran/Ran_Research/react-site/src/components/emotion.js":"6"},{"size":547,"mtime":1624085370398,"results":"7","hashOfConfig":"8"},{"size":362,"mtime":1623967182193,"results":"9","hashOfConfig":"8"},{"size":411,"mtime":1624085389676,"results":"10","hashOfConfig":"8"},{"size":249,"mtime":1623967182192,"results":"11","hashOfConfig":"8"},{"size":115004,"mtime":1633108278125,"results":"12","hashOfConfig":"8"},{"size":2741,"mtime":1623967182192,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1dsfiwa",{"filePath":"16","messages":"17","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"18","messages":"19","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"20"},{"filePath":"21","messages":"22","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23"},{"filePath":"24","messages":"25","errorCount":0,"fatalErrorCount":0,"warningCount":30,"fixableErrorCount":0,"fixableWarningCount":0,"source":"26"},{"filePath":"27","messages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/akshaybaweja/Desktop/Workspace/Ran/Ran_Research/react-site/src/index.js",[],"/Users/akshaybaweja/Desktop/Workspace/Ran/Ran_Research/react-site/src/reportWebVitals.js",[],"/Users/akshaybaweja/Desktop/Workspace/Ran/Ran_Research/react-site/src/App.js",["29","30"],"import './components/App.css';\n//import TopNav from './components/nav-top';\nimport LeftNav from './components/nav-left';\nimport HomepageImage from './components/homepageimage';\nimport Nav from 'react-bootstrap/Nav';\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n      </header>\n      <body>\n        <LeftNav/>\n      </body>\n    </div>\n  );\n}\n\nexport default App;\n","/Users/akshaybaweja/Desktop/Workspace/Ran/Ran_Research/react-site/src/components/homepageimage.js",["31"],"import React from 'react';\n\nfunction HomepageImage(){\n  const url = 'https://cdn.filestackcontent.com/XYrHCaFGRSaq0EPKY1S6';\n  return(\n    <img src={url} style={{width:650}} alth='Image of Golden Gate Bridge'/>\n  );\n}\n\nexport default HomepageImage;\n","/Users/akshaybaweja/Desktop/Workspace/Ran/Ran_Research/react-site/src/components/nav-left.js",["32","33","34","35","36","37","38","39","40","41","42","43","44","45","46","47","48","49","50","51","52","53","54","55","56","57","58","59","60","61"],"import React from 'react';\nimport './App.css';\nimport emotion from \"./Icons/Small Icons/mood-24px-grey.svg\";\nimport tactor from \"./Icons/Small Icons/tactor-grey.svg\";\nimport behavior from \"./Icons/Small Icons/touch-grey.svg\";\nimport neutral from \"./Icons/Emotion/Emotion_Neutral.svg\";\nimport happiness from \"./Icons/Emotion/Emotion_Happiness .svg\";\nimport fear from \"./Icons/Emotion/Emotion_Fear.svg\";\nimport sympathy from \"./Icons/Emotion/Emotion_Sympathy.svg\";\nimport sadness from \"./Icons/Emotion/Emotion_Sadness.svg\";\nimport anger from \"./Icons/Emotion/Emotion_Anger.svg\";\nimport disgust from \"./Icons/Emotion/Emotion_Disgust.svg\";\nimport love from \"./Icons/Emotion/Emotion_Love.svg\";\nimport gratitude from \"./Icons/Emotion/Emotion_Gratitude.svg\";\nimport shake from \"./Icons/Tactor/Gesture icons_Shake.svg\";\nimport squeeze from \"./Icons/Tactor/Gesture icons_Squeeze-15.svg\";\nimport hit from \"./Icons/Tactor/Gesture icons_Hit.svg\";\nimport pat from \"./Icons/Tactor/Gesture icons_Pat-14.svg\";\nimport push from \"./Icons/Tactor/Gesture icons_Push-21.svg\";\nimport rub from \"./Icons/Tactor/Gesture icons_Rub-18.svg\";\nimport stroke from \"./Icons/Tactor/Gesture icons_Stroke.svg\";\nimport tap from \"./Icons/Tactor/Gesture icons_Tap-17.svg\";\nimport trange from \"./Icons/Small Icons/touch_range.svg\";\nimport tspeed from \"./Icons/Small Icons/speed-touch.svg\";\nimport rspeed from \"./Icons/Small Icons/speed_retreat.svg\";\nimport randomness from \"./Icons/Small Icons/Touch_randomness.svg\";\nimport tint from \"./Icons/Small Icons/touch_interval.svg\";\nimport irand from \"./Icons/Small Icons/interval_randomness.svg\";\nimport play from \"./Icons/play-filled.svg\";\nimport pause from \"./Icons/pause-filled.svg\";\nimport del from \"./Icons/delete.svg\";\nimport edit from \"./Icons/edit.svg\";\nimport pauseOutline from \"./Icons/pause-unfilled.svg\";\nimport playOutline from \"./Icons/play-unfilled.svg\";\nimport download from \"./Icons/download.svg\";\nimport settings from \"./Icons/settings.svg\";\nimport arrow from \"./Icons/Small Icons/arrow.svg\";\nimport hitw from \"./Icons/Tactor_white/Gesture_white_Hit.svg\";\nimport patw from \"./Icons/Tactor_white/Gesture_white_Pat-14.svg\";\nimport pushw from \"./Icons/Tactor_white/Gesture_white_Push-21.svg\";\nimport rubw from \"./Icons/Tactor_white/Gesture_white_Rub-18.svg\";\nimport shakew from \"./Icons/Tactor_white/Gesture_white_Shake.svg\";\nimport squeezew from \"./Icons/Tactor_white/Gesture_white_Squeeze-15.svg\";\nimport strokew from \"./Icons/Tactor_white/Gesture_white_Stroke.svg\";\nimport tapw from \"./Icons/Tactor_white/Gesture_white_Tap-17.svg\";\nimport link from \"./Icons/link.svg\";\nimport patup from \"./Icons/Tactor Image/Pat/yellow_pat_up.png\";\nimport patcut from \"./Icons/Tactor Image/Pat/yellow_pat_cut.png\";\nimport pushup from \"./Icons/Tactor Image/Push/yellow_push_up.png\";\nimport pushcut from \"./Icons/Tactor Image/Push/yellow_push_cut.png\";\nimport rubup from \"./Icons/Tactor Image/Rub/yellow_rub_up.png\";\nimport rubcut from \"./Icons/Tactor Image/Rub/yellow_rub_cut.png\";\nimport shakeup from \"./Icons/Tactor Image/Shake/yellow_shake_up.png\";\nimport shakecut from \"./Icons/Tactor Image/Shake/yellow_shake_cut.png\";\nimport squeezeup from \"./Icons/Tactor Image/Squeeze/yellow_squeeze_up.png\";\nimport squeezecut from \"./Icons/Tactor Image/Squeeze/yellow_squeeze_cut.png\";\nimport strokeup from \"./Icons/Tactor Image/Stroke/yellow_stroke_up.png\";\nimport strokecut from \"./Icons/Tactor Image/Stroke/yellow_stroke_cut.png\";\nimport tapup from \"./Icons/Tactor Image/Tap/yellow_tap_up.png\";\nimport tapcut from \"./Icons/Tactor Image/Tap/yellow_tap_cut.png\";\nimport hitplace from \"./Icons/Placement Image/Hit_placement-12.png\";\nimport patplace from \"./Icons/Placement Image/Pat_placement-13.png\";\nimport pushplace from \"./Icons/Placement Image/Push_placement-14.png\";\nimport rubplace from \"./Icons/Placement Image/Rub_placement-15.png\";\nimport shakeplace from \"./Icons/Placement Image/Shake_placement-16.png\";\nimport squeezeplace from \"./Icons/Placement Image/Squeeze_placement-17.png\";\nimport strokeplace from \"./Icons/Placement Image/Stroke_placement-18.png\";\nimport tapplace from \"./Icons/Placement Image/Tap_placement-19.png\";\nimport homeconnect from \"./Icons/Small Icons/home_connect-24px-grey.svg\";\nimport serialconnect from \"./Icons/Small Icons/serial_connect-24px-grey.svg\";\nimport tactorconnect from \"./Icons/Small Icons/tactor_connect-24px-grey.svg\";\nimport homeconnect_pc from \"./Icons/Connection/home_connect_pc.svg\";\nimport homeconnect_power from \"./Icons/Connection/home_connect_power.svg\";\n\nimport Emotion from './emotion';\nimport Sketch from 'react-p5';\n\nimport { ToastContainer, toast, Slide } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.min.css';\n\nvar serialPort = require(\"browser-serialport\");\n// const port = new SerialPort('/dev/tty-usbserial1');\n\n//TO DO: Add the emotion and placeholders to the left bar.\n//Allow users to go home with the top navigation\n//Allow users to clear selection of tactor and emotion\n//Add graph and sliders\n//Add serial library\n//Add Archive\n\nclass LeftNav extends React.Component{\nangle = 0;\ncount = 0;\nx =0;\ntimer;\nfrom = false;\nvolhistory = [];\nport = null;\nserialmsg = [0, 12, 12, 90, 25, 150, 0, 50, 0];\n\nconstructor(props) {\n  super(props);\n  \n  let foundUser = 'default';\n  let loggedInUser = localStorage.getItem(\"username\");\n  if (loggedInUser) {\n    foundUser = loggedInUser\n    this.setState({username: foundUser});\n  }\n\n  this.state = {\n    home: true,\n    emotion: false,\n    estate: null,\n    tactor: false,\n    tstate: null,\n    behavior: false,\n    bstate: null,\n    eselected:false,\n    eicon: null,\n    ename: null,\n    tselected:false,\n    ticon: null,\n    tname: null,\n    trange:[90,0,0],\n    tspeed:[180,0,0],\n    rspeed:[180,0,0],\n    randomness:[25,0,0],\n    tint:[500,0,0],\n    irand:[150,0,0],\n    shake: null,\n    squeeze: null,\n    hit: null,\n    pat: null,\n    push: null,\n    rub: null,\n    stroke: null,\n    tap: null,\n    chome: true,\n    homeconnect: true,\n    hcstate: \"active\",\n    serialconnect: false,\n    scstate: null,\n    tactorconnect: false,\n    tcstate: null,\n    port:null,\n    generator:[true,\"active\"],\n    tinfo:[false, null],\n    connection: [false, null],\n    archive:[false,null],\n    shake1:[false,null,false,\"Tactor 5\", \"Pin 5\"], //selected, \"active\", activated\n    squeeze1:[false,null,false, \"Tactor 6\", \"Pin 6\"],\n    hit1:[true, \"active\",false, \"Tactor 1\", \"Pin 2\"],\n    pat1:[false,null,false, \"Tactor 2\", \"Pin 2\"],\n    push1:[false,null,false, \"Tactor 3\", \"Pin 3\"],\n    rub1: [false,null,false, \"Tactor 4\", \"Pin 4\"],\n    stroke1: [false,null,false, \"Tactor 7\", \"Pin 7\"],\n    tap1: [false,null,false, \"Tactor 8\", \"Pin 8\"],\n    place:hitplace,\n    cut:patcut,\n    up:patup,\n    acttact:[hit, \"Tactor 1\", \"Pin 2\", \"Hit\", false],\n    happiness:null,\n    fear:null,\n    sympathy:null,\n    sadness:null,\n    anger: null,\n    disgust: null,\n    love: null,\n    gratitude: null,\n    archiveData: [],\n    username: foundUser,\n    fileName: \"Timeline Sample 1\",\n  };\n  this.handleChange = this.handleChange.bind(this);\n}\n\nhandleChange(event) {\n  this.setState({fileName: event.target.value});\n}\n\nasync write(port, slider){\n  const writer = port.writable.getWriter();\n  //const toWrite = new TextEncoder().encode(\"h\");\n  //parseInt(slider);\n  var data = new Uint8Array(9);\n  for(var i=0;i<slider.length;i++){\n    data[i] = parseInt(slider[i]);\n  }\n\n  // console.log(port.writable);\n  await writer.write(data);\n  console.log(data);\n \n  //   const textEncoder = new TextEncoder();\n  // const writableStreamClosed = textEncoder.readable.pipeTo(port.writable);\n\n  // const writer = textEncoder.writable.getWriter();\n\n  // await writer.write(\"hello\");\n  writer.releaseLock();\n};\n\nasync start(data) {\n  if (this.state.port == null) {\n    if (window.confirm(\"This app is requesting to use your serial port.\\nAre you alright with this action?\")) {\n      this.port = await navigator.serial.requestPort();\n      const ports = await navigator.serial.getPorts();\n\n      if (this.port.readable === null) {\n        await this.port.open({\n          baudRate: 9600\n        });\n      }\n      console.log(this.port);\n      console.log(ports);\n      this.setState({\n        port: true,\n      });\n\n    }\n    console.log(this.state.port);\n    this.write(this.port, data);\n  } else {\n    toast(\"Action Suspended\");\n  }\n};\n\nhandleClick(name) {\n  var hitstate=this.state.hit1;\n  var patstate=this.state.pat1;\n  var pushstate=this.state.push1;\n  var rubstate=this.state.rub1;\n  var shakestate=this.state.shake1;\n  var squeezestate=this.state.squeeze1;\n  var strokestate=this.state.stroke1;\n  var tapstate=this.state.tap1;\n  switch (name) {\n    case \"emotion\":\n      this.setState({ home: false, emotion:true, estate:\"active\", tactor: false, tstate:null, behavior: false, bstate:null});\n      //alert(localStorage.getItem('test'));\n      break;\n    case \"tactor\":\n      this.setState({ home: false, emotion: false, estate:null, tactor: true, tstate:\"active\", behavior: false, bstate: null});\n      break;\n    case \"emotionselect\":\n      if(this.state.tselected){\n        this.setState({home: false, emotion: false, estate:null, tactor: false, tstate:null, behavior: true, bstate:\"active\"});\n      }else{\n        this.setState({home: false, emotion: false, estate:null, tactor: true, tstate:\"active\", behavior: false, bstate: null});\n      }\n      break;\n    case \"tactselect\":\n      if(this.state.eselected){\n        this.setState({home: false, emotion: false, estate:null, tactor: false, tstate:null, behavior: true, bstate:\"active\"});\n      }else{\n        this.setState({ home: false, emotion:true, estate:\"active\", tactor: false, tstate:null, behavior: false, bstate:null});\n      }\n      break;\n    case \"behavior\":\n    this.setState({home: false, emotion: false, estate:null, tactor: false, tstate:null, behavior: true, bstate:\"active\"});\n      break;\n    case \"tbots\":\n    this.setState({home:true, emotion: false,  tactor:false, behavior:false});\n    break;\n    // connection tab pages\n    case \"homeConnect\": \n    this.setState({ homeconnect:true, hcstate:\"active\", serialconnect: false, scstate:null, tactorconnect: false, tcstate:null});\n    break;\n    case \"serialConnect\": \n    this.setState({ homeconnect:false, hcstate:null, serialconnect: true, scstate:\"active\", tactorconnect: false, tcstate:null});\n    break;\n    case \"selectPort\":\n      // open SerialPort pop-up\n      this.start(\"<RAN>\");\n      console.log(\"<RAN>\");\n      console.log(this.state.port == null ? \"PORT OPEN\":\"PORT CLOSED\");\n    break;\n    case \"tactorConnect\": \n    this.setState({ homeconnect:false, hcstate:null, serialconnect: false, scstate:null, tactorconnect: true, tcstate:\"active\"});\n    break;\n    // Topbar Page Tabs\n    case \"tgen\":\n    this.setState({generator:[true,\"active\"], tinfo:[false,null], connection:[false, null], archive:[false,null]});\n    break;\n    case \"tinfo\":\n    this.setState({generator:[false,null], tinfo:[true,\"active\"], connection:[false, null], archive:[false,null]});\n    break;\n    case \"connection\":\n    this.setState({generator:[false,null], tinfo:[false, null], connection:[true,\"active\"], archive:[false,null]});\n    break;\n    case \"archive\":\n    this.setState({generator:[false,null], tinfo:[false,null], connection:[false, null], archive:[true,\"active\"]});\n    // alert(\"Archive is not yet an active feature. Stay Tuned!\");\n    break;\n    // Emotions\n    case \"hit\":\n    if(hitstate[2]){\n      if(this.state.eselected){\n\n        this.setState({home: false, emotion: false, estate:null, tactor: false, tstate:null, behavior: true, bstate:\"active\"});\n      }else{\n\n        this.setState({ home: false, emotion:true, estate:\"active\", tactor: false, tstate:null, behavior: false, bstate:null});\n      }\n      break;\n    }else{\n      toast(\"You need to activate this tactor before continuing.\");\n\n      this.setState({generator:[false,null], tinfo:[true,\"active\"], connection:[false, null], archive:[false,null]});\n      this.setState({place:hitplace,cut:patcut,up:patup,acttact:[hit,hitstate[3],hitstate[4], \"Hit\"],hit1:[true,\"active\",hitstate[2],hitstate[3],hitstate[4]], pat1:[false,null,patstate[2],patstate[3],patstate[4]], push1:[false,null,pushstate[2],pushstate[3],pushstate[4]], rub1:[false,null,rubstate[2],rubstate[3],rubstate[4]],shake1:[false,null,shakestate[2],shakestate[3],shakestate[4]],squeeze1:[false,null,squeezestate[2],squeezestate[3],squeezestate[4]],stroke1:[false,null,strokestate[2],strokestate[3],strokestate[4]],tap1:[false,null,tapstate[2],tapstate[3],tapstate[4]],});\n\n    }\n    break;\n    case \"pat\":\n    if(patstate[2]){\n      if(this.state.eselected){\n\n        this.setState({home: false, emotion: false, estate:null, tactor: false, tstate:null, behavior: true, bstate:\"active\"});\n      }else{\n\n        this.setState({ home: false, emotion:true, estate:\"active\", tactor: false, tstate:null, behavior: false, bstate:null});\n      }\n      break;\n    }else{\n      toast(\"You need to activate this tactor before continuing.\");\n\n      this.setState({generator:[false,null], tinfo:[true,\"active\"], connection:[false, null], archive:[false,null]});\n      this.setState({place:patplace,cut:patcut,up:patup,acttact:[pat,patstate[3],patstate[4], \"Pat\"],hit1:[false,null,hitstate[2],hitstate[3],hitstate[4]], pat1:[true,\"active\",patstate[2],patstate[3],patstate[4]], push1:[false,null,pushstate[2],pushstate[3], pushstate[4]], rub1:[false,null,rubstate[2],rubstate[3],rubstate[4]],shake1:[false,null,shakestate[2],shakestate[3],shakestate[4]],squeeze1:[false,null,squeezestate[2],squeezestate[3],squeezestate[4]],stroke1:[false,null,strokestate[2],strokestate[3],strokestate[4]],tap1:[false,null,tapstate[2],tapstate[3],tapstate[4]],});\n    }\n    break;\n    case \"push\":\n    if(pushstate[2]){\n      if(this.state.eselected){\n\n        this.setState({home: false, emotion: false, estate:null, tactor: false, tstate:null, behavior: true, bstate:\"active\"});\n      }else{\n\n        this.setState({ home: false, emotion:true, estate:\"active\", tactor: false, tstate:null, behavior: false, bstate:null});\n      }\n      break;\n    }else{\n      toast(\"You need to activate this tactor before continuing.\");\n\n      this.setState({generator:[false,null], tinfo:[true,\"active\"], connection:[false, null], archive:[false,null]});\n      this.setState({place:pushplace,cut:pushcut,up:pushup,acttact:[push,pushstate[3],pushstate[4], \"Push\"],hit1:[false,null,hitstate[2],hitstate[3],hitstate[4]], pat1:[false,null,patstate[2],patstate[3],patstate[4]], push1:[true,\"active\",pushstate[2],pushstate[3],pushstate[4]], rub1:[false,null,rubstate[2],rubstate[3],rubstate[4]],shake1:[false,null,shakestate[2],shakestate[3],shakestate[4]],squeeze1:[false,null,squeezestate[2],squeezestate[3],squeezestate[4]],stroke1:[false,null,strokestate[2],strokestate[3],strokestate[4]],tap1:[false,null,tapstate[2],tapstate[3],tapstate[4]],});\n\n    }\n    break;\n    case \"rub\":\n    if(rubstate[2]){\n      if(this.state.eselected){\n\n        this.setState({home: false, emotion: false, estate:null, tactor: false, tstate:null, behavior: true, bstate:\"active\"});\n      }else{\n\n        this.setState({ home: false, emotion:true, estate:\"active\", tactor: false, tstate:null, behavior: false, bstate:null});\n      }\n      break;\n    }else{\n      toast(\"You need to activate this tactor before continuing.\");\n\n      this.setState({generator:[false,null], tinfo:[true,\"active\"], connection:[false, null], archive:[false,null]});\n      this.setState({place:rubplace,cut:rubcut,up:rubup,acttact:[rub,rubstate[3],rubstate[4], \"Rub\"],hit1:[false,null,hitstate[2],hitstate[3],hitstate[4]], pat1:[false,null,patstate[2],patstate[3],patstate[4]], push1:[false,null,pushstate[2],pushstate[3],pushstate[4]], rub1:[true,\"active\",rubstate[2],rubstate[3],rubstate[4]],shake1:[false,null,shakestate[2],shakestate[3],shakestate[4]],squeeze1:[false,null,squeezestate[2],squeezestate[3],squeezestate[4]],stroke1:[false,null,strokestate[2],strokestate[3],strokestate[4]],tap1:[false,null,tapstate[2],tapstate[3],tapstate[4]],});\n\n    }\n\n    break;\n    case \"shake\":\n    if(shakestate[2]){\n      if(this.state.eselected){\n\n        this.setState({home: false, emotion: false, estate:null, tactor: false, tstate:null, behavior: true, bstate:\"active\"});\n      }else{\n\n        this.setState({ home: false, emotion:true, estate:\"active\", tactor: false, tstate:null, behavior: false, bstate:null});\n      }\n      break;\n    }else{\n      toast(\"You need to activate this tactor before continuing.\");\n\n      this.setState({generator:[false,null], tinfo:[true,\"active\"], connection:[false, null], archive:[false,null]});\n      this.setState({place:shakeplace,cut:shakecut,up:shakeup,acttact:[shake,shakestate[3],shakestate[4], \"Shake\"],hit1:[false,null,hitstate[2],hitstate[3],hitstate[4]], pat1:[false,null,patstate[2],patstate[3],patstate[4]], push1:[false,null,shakestate[2],shakestate[3],shakestate[4]], rub1:[false,null,rubstate[2],rubstate[3],rubstate[4]],shake1:[true,\"active\",shakestate[2],shakestate[3],shakestate[4]],squeeze1:[false,null,squeezestate[2],squeezestate[3],squeezestate[4]],stroke1:[false,null,strokestate[2],strokestate[3],strokestate[4]],tap1:[false,null,tapstate[2],tapstate[3],tapstate[4]],});\n\n    }\n\n    break;\n    case \"squeeze\":\n    if(squeezestate[2]){\n      if(this.state.eselected){\n\n        this.setState({home: false, emotion: false, estate:null, tactor: false, tstate:null, behavior: true, bstate:\"active\"});\n      }else{\n\n        this.setState({ home: false, emotion:true, estate:\"active\", tactor: false, tstate:null, behavior: false, bstate:null});\n      }\n      break;\n    }else{\n      toast(\"You need to activate this tactor before continuing.\");\n      this.setState({generator:[false,null], tinfo:[true,\"active\"], connection:[false, null], archive:[false,null]});\n      this.setState({place:squeezeplace,cut:squeezecut,up:squeezeup,acttact:[squeeze,squeezestate[3],squeezestate[4], \"Squeeze\"],hit1:[false,null,hitstate[2],hitstate[3],hitstate[4]], pat1:[false,null,patstate[2],patstate[3],patstate[4]], push1:[false,null,pushstate[2],pushstate[3],pushstate[4]], rub1:[false,null,rubstate[2],rubstate[3],rubstate[4]],shake1:[false,null,shakestate[2],shakestate[3],shakestate[4]],squeeze1:[true,\"active\",squeezestate[2],squeezestate[3],squeezestate[4]],stroke1:[false,null,strokestate[2],strokestate[3],strokestate[4]],tap1:[false,null,tapstate[2],tapstate[3],tapstate[4]],});\n\n    }\n\n    break;\n    case \"stroke\":\n    if(strokestate[2]){\n      if(this.state.eselected){\n\n        this.setState({home: false, emotion: false, estate:null, tactor: false, tstate:null, behavior: true, bstate:\"active\"});\n      }else{\n\n        this.setState({ home: false, emotion:true, estate:\"active\", tactor: false, tstate:null, behavior: false, bstate:null});\n      }\n      break;\n    }else{\n      toast(\"You need to activate this tactor before continuing.\");\n      this.setState({generator:[false,null], tinfo:[true,\"active\"], connection:[false, null], archive:[false,null]});\n      this.setState({place:strokeplace,cut:strokecut,up:strokeup,acttact:[stroke,strokestate[3],strokestate[4], \"Stroke\"],hit1:[false,null,hitstate[2],hitstate[3],hitstate[4]], pat1:[false,null,patstate[2],patstate[3],patstate[4]], push1:[false,null,pushstate[2],pushstate[3],pushstate[4]], rub1:[false,null,rubstate[2],rubstate[3],rubstate[4]],shake1:[false,null,shakestate[2],shakestate[3],shakestate[4]],squeeze1:[false,null,squeezestate[2],squeezestate[3],squeezestate[4]],stroke1:[true,\"active\",strokestate[2],strokestate[3],strokestate[4]],tap1:[false,null,tapstate[2],tapstate[3],tapstate[4]],});\n\n    }\n\n    break;\n    case \"tap\":\n    if(tapstate[2]){\n      if(this.state.eselected){\n\n        this.setState({home: false, emotion: false, estate:null, tactor: false, tstate:null, behavior: true, bstate:\"active\"});\n      }else{\n\n        this.setState({ home: false, emotion:true, estate:\"active\", tactor: false, tstate:null, behavior: false, bstate:null});\n      }\n      break;\n    }else{\n      toast(\"You need to activate this tactor before continuing.\");\n      this.setState({generator:[false,null], tinfo:[true,\"active\"], connection:[false, null], archive:[false,null]});\n      this.setState({place:tapplace,cut:tapcut,up:tapup,acttact:[tap,tapstate[3],tapstate[4],\"Tap\"],hit1:[false,null,hitstate[2],hitstate[3],hitstate[4]], pat1:[false,null,patstate[2],patstate[3],patstate[4]], push1:[false,null,pushstate[2],pushstate[3],pushstate[4]], rub1:[false,null,rubstate[2],rubstate[3],rubstate[4]],shake1:[false,null,shakestate[2],shakestate[3],shakestate[4]],squeeze1:[false,null,squeezestate[2],squeezestate[3],squeezestate[4]],stroke1:[false,null,strokestate[2],strokestate[3],strokestate[4]],tap1:[true,\"active\",tapstate[2],tapstate[3],tapstate[4]],});\n\n    }\n\n    break;\n    // Emotions Storage\n    case \"hit1\":\n    this.setState({place:hitplace,cut:patcut,up:patup,acttact:[hit,hitstate[3],hitstate[4], \"Hit\"],hit1:[true,\"active\",hitstate[2],hitstate[3],hitstate[4]], pat1:[false,null,patstate[2],patstate[3],patstate[4]], push1:[false,null,pushstate[2],pushstate[3],pushstate[4]], rub1:[false,null,rubstate[2],rubstate[3],rubstate[4]],shake1:[false,null,shakestate[2],shakestate[3],shakestate[4]],squeeze1:[false,null,squeezestate[2],squeezestate[3],squeezestate[4]],stroke1:[false,null,strokestate[2],strokestate[3],strokestate[4]],tap1:[false,null,tapstate[2],tapstate[3],tapstate[4]],});\n    break;\n    case \"pat1\":\n    this.setState({place:patplace,cut:patcut,up:patup,acttact:[pat,patstate[3],patstate[4], \"Pat\"],hit1:[false,null,hitstate[2],hitstate[3],hitstate[4]], pat1:[true,\"active\",patstate[2],patstate[3],patstate[4]], push1:[false,null,pushstate[2],pushstate[3], pushstate[4]], rub1:[false,null,rubstate[2],rubstate[3],rubstate[4]],shake1:[false,null,shakestate[2],shakestate[3],shakestate[4]],squeeze1:[false,null,squeezestate[2],squeezestate[3],squeezestate[4]],stroke1:[false,null,strokestate[2],strokestate[3],strokestate[4]],tap1:[false,null,tapstate[2],tapstate[3],tapstate[4]],});\n    break;\n    case \"push1\":\n    this.setState({place:pushplace,cut:pushcut,up:pushup,acttact:[push,pushstate[3],pushstate[4], \"Push\"],hit1:[false,null,hitstate[2],hitstate[3],hitstate[4]], pat1:[false,null,patstate[2],patstate[3],patstate[4]], push1:[true,\"active\",pushstate[2],pushstate[3],pushstate[4]], rub1:[false,null,rubstate[2],rubstate[3],rubstate[4]],shake1:[false,null,shakestate[2],shakestate[3],shakestate[4]],squeeze1:[false,null,squeezestate[2],squeezestate[3],squeezestate[4]],stroke1:[false,null,strokestate[2],strokestate[3],strokestate[4]],tap1:[false,null,tapstate[2],tapstate[3],tapstate[4]],});\n    break;\n    case \"rub1\":\n    this.setState({place:rubplace,cut:rubcut,up:rubup,acttact:[rub,rubstate[3],rubstate[4], \"Rub\"],hit1:[false,null,hitstate[2],hitstate[3],hitstate[4]], pat1:[false,null,patstate[2],patstate[3],patstate[4]], push1:[false,null,pushstate[2],pushstate[3],pushstate[4]], rub1:[true,\"active\",rubstate[2],rubstate[3],rubstate[4]],shake1:[false,null,shakestate[2],shakestate[3],shakestate[4]],squeeze1:[false,null,squeezestate[2],squeezestate[3],squeezestate[4]],stroke1:[false,null,strokestate[2],strokestate[3],strokestate[4]],tap1:[false,null,tapstate[2],tapstate[3],tapstate[4]],});\n    break;\n    case \"shake1\":\n    this.setState({place:shakeplace,cut:shakecut,up:shakeup,acttact:[shake,shakestate[3],shakestate[4], \"Shake\"],hit1:[false,null,hitstate[2],hitstate[3],hitstate[4]], pat1:[false,null,patstate[2],patstate[3],patstate[4]], push1:[false,null,shakestate[2],shakestate[3],shakestate[4]], rub1:[false,null,rubstate[2],rubstate[3],rubstate[4]],shake1:[true,\"active\",shakestate[2],shakestate[3],shakestate[4]],squeeze1:[false,null,squeezestate[2],squeezestate[3],squeezestate[4]],stroke1:[false,null,strokestate[2],strokestate[3],strokestate[4]],tap1:[false,null,tapstate[2],tapstate[3],tapstate[4]],});\n    break;\n    case \"squeeze1\":\n    this.setState({place:squeezeplace,cut:squeezecut,up:squeezeup,acttact:[squeeze,squeezestate[3],squeezestate[4], \"Squeeze\"],hit1:[false,null,hitstate[2],hitstate[3],hitstate[4]], pat1:[false,null,patstate[2],patstate[3],patstate[4]], push1:[false,null,pushstate[2],pushstate[3],pushstate[4]], rub1:[false,null,rubstate[2],rubstate[3],rubstate[4]],shake1:[false,null,shakestate[2],shakestate[3],shakestate[4]],squeeze1:[true,\"active\",squeezestate[2],squeezestate[3],squeezestate[4]],stroke1:[false,null,strokestate[2],strokestate[3],strokestate[4]],tap1:[false,null,tapstate[2],tapstate[3],tapstate[4]],});\n    break;\n    case \"stroke1\":\n    this.setState({place:strokeplace,cut:strokecut,up:strokeup,acttact:[stroke,strokestate[3],strokestate[4], \"Stroke\"],hit1:[false,null,hitstate[2],hitstate[3],hitstate[4]], pat1:[false,null,patstate[2],patstate[3],patstate[4]], push1:[false,null,pushstate[2],pushstate[3],pushstate[4]], rub1:[false,null,rubstate[2],rubstate[3],rubstate[4]],shake1:[false,null,shakestate[2],shakestate[3],shakestate[4]],squeeze1:[false,null,squeezestate[2],squeezestate[3],squeezestate[4]],stroke1:[true,\"active\",strokestate[2],strokestate[3],strokestate[4]],tap1:[false,null,tapstate[2],tapstate[3],tapstate[4]],});\n    break;\n    case \"tap1\":\n    this.setState({place:tapplace,cut:tapcut,up:tapup,acttact:[tap,tapstate[3],tapstate[4],\"Tap\"],hit1:[false,null,hitstate[2],hitstate[3],hitstate[4]], pat1:[false,null,patstate[2],patstate[3],patstate[4]], push1:[false,null,pushstate[2],pushstate[3],pushstate[4]], rub1:[false,null,rubstate[2],rubstate[3],rubstate[4]],shake1:[false,null,shakestate[2],shakestate[3],shakestate[4]],squeeze1:[false,null,squeezestate[2],squeezestate[3],squeezestate[4]],stroke1:[false,null,strokestate[2],strokestate[3],strokestate[4]],tap1:[true,\"active\",tapstate[2],tapstate[3],tapstate[4]],});\n    break;\n    // Archive Function\n    case \"save2archive\":\n\n    var formdata = new FormData();\n\n    formdata.append(\"name\", this.state.fileName);\n    formdata.append(\"emotion\", this.state.ename);\n    formdata.append(\"tactor\", this.state.tname);\n    formdata.append(\"touch_range\", document.getElementById(\"touch-range\").value);\n    formdata.append(\"touch_speed\", document.getElementById(\"speed-touch\").value);\n    formdata.append(\"retreat_speed\", document.getElementById(\"speed-retreat\").value);\n    formdata.append(\"touch_random\", document.getElementById(\"touch-randomness\").value);\n    formdata.append(\"touch_interval\", document.getElementById(\"touch-interval\").value);\n    formdata.append(\"interval_random\", document.getElementById(\"interval-randomness\").value);\n\n    var requestOptions = {\n      method: 'POST',\n      body: formdata,\n      redirect: 'follow'\n    };\n\n    fetch('https://akshaybaweja.com/ran/api.php/archive/' + this.state.username, requestOptions)\n      .then(response => response.json())\n      .then(data => data.response===\"success\"?toast(\"Saved Successfully ✅\"):toast(\"❌ Error while saving\"))\n      .then(() => this.getArchiveData());\n    break;\n    // Login Function\n    case \"login\": \n    let name = window.prompt(\"Enter your username\", \"default\");\n    if(name !== null) {\n      console.log(name);\n      fetch('https://akshaybaweja.com/ran/api.php/user/' + name, requestOptions)\n        .then(response => response.json())\n        .then(data => {\n          if (data.response !== \"success\") {\n            name = 'default';\n            toast(\"Inavlid Username\");\n          }\n\n          this.setState({\n            username: name\n          }, () => {\n            toast(({ closeToast }) => <div>Username set to [<b>{this.state.username}</b>]</div>);\n            localStorage.setItem(\"username\", this.state.username);\n            this.getArchiveData();\n          });\n        });\n    }\n    break;\n    default: console.log(\"handleClick: defaultState\");\n  }\n}\n\nasync getSerialPorts(){\n  serialPort.list((err, ports) => {\n    console.log(err);\n    console.log(ports);\n  })\n}\n\nisActive(name) {\n  let status = false;\n  switch (name.toLowerCase()) {\n    case \"hit\":\n      status = this.state.hit1[2];\n      break;\n    case \"pat\":\n      status = this.state.pat1[2];\n      break;\n    case \"push\":\n      status = this.state.push1[2];\n      break;\n    case \"rub\":\n      status =this.state.rub1[2];\n      break;\n    case \"shake\":\n      status = this.state.shake1[2];\n      break;\n    case \"squeeze\":\n      status = this.state.squeeze1[2];\n      break;\n    case \"stroke\":\n      status = this.state.stroke1[2];\n      break;\n    case \"tap\":\n      status = this.state.tap1[2];\n      break;\n    default:\n      status = false;\n      console.log(\">isActive: default\", name);\n  }\n  return status;\n}\n\nactivate(name, callback = () => {}) {\n  if (!this.isActive(name)) {\n    var hitstate = this.state.hit1;\n    var patstate = this.state.pat1;\n    var pushstate = this.state.push1;\n    var rubstate = this.state.rub1;\n    var shakestate = this.state.shake1;\n    var squeezestate = this.state.squeeze1;\n    var strokestate = this.state.stroke1;\n    var tapstate = this.state.tap1;\n\n    switch (name) {\n      case \"Hit\":\n        this.setState({\n          hit1: [hitstate[0], hitstate[1], true, hitstate[3], hitstate[4]]\n        }, callback);\n        break;\n      case \"Pat\":\n        this.setState({\n          pat1: [patstate[0], patstate[1], true, patstate[3], patstate[4]]\n        }, callback);\n        break;\n      case \"Push\":\n        this.setState({\n          push1: [pushstate[0], pushstate[1], true, pushstate[3], pushstate[4]]\n        }, callback);\n        break;\n      case \"Rub\":\n        this.setState({\n          rub1: [rubstate[0], rubstate[1], true, rubstate[3], rubstate[4]]\n        }, callback);\n        break;\n      case \"Shake\":\n        this.setState({\n          shake1: [shakestate[0], shakestate[1], true, shakestate[3], shakestate[4]]\n        }, callback);\n        break;\n      case \"Squeeze\":\n        this.setState({\n          squeeze1: [squeezestate[0], squeezestate[1], true, squeezestate[3], squeezestate[4]]\n        }, callback);\n        break;\n      case \"Stroke\":\n        this.setState({\n          stroke1: [strokestate[0], strokestate[1], true, strokestate[3], strokestate[4]]\n        }, callback);\n        break;\n      case \"Tap\":\n        this.setState({\n          tap1: [tapstate[0], tapstate[1], true, tapstate[3], tapstate[4]]\n        }, callback);\n        break;\n      default:\n        console.log(\"activate: defaultState\", name);\n    }\n    toast(name + \" was activated!\");\n  } else {\n    callback();\n  }\n}\n\ndeactivate(name, callback = () => {}) {\n    if (this.isActive(name)) {\n      var hitstate = this.state.hit1;\n      var patstate = this.state.pat1;\n      var pushstate = this.state.push1;\n      var rubstate = this.state.rub1;\n      var shakestate = this.state.shake1;\n      var squeezestate = this.state.squeeze1;\n      var strokestate = this.state.stroke1;\n      var tapstate = this.state.tap1;\n  \n      switch (name) {\n        case \"Hit\":\n          this.setState({\n            hit1: [hitstate[0], hitstate[1], false, hitstate[3], hitstate[4]]\n          }, callback);\n          break;\n        case \"Pat\":\n          this.setState({\n            pat1: [patstate[0], patstate[1], false, patstate[3], patstate[4]]\n          }, callback);\n          break;\n        case \"Push\":\n          this.setState({\n            push1: [pushstate[0], pushstate[1], false, pushstate[3], pushstate[4]]\n          }, callback);\n          break;\n        case \"Rub\":\n          this.setState({\n            rub1: [rubstate[0], rubstate[1], false, rubstate[3], rubstate[4]]\n          }, callback);\n          break;\n        case \"Shake\":\n          this.setState({\n            shake1: [shakestate[0], shakestate[1], false, shakestate[3], shakestate[4]]\n          }, callback);\n          break;\n        case \"Squeeze\":\n          this.setState({\n            squeeze1: [squeezestate[0], squeezestate[1], false, squeezestate[3], squeezestate[4]]\n          }, callback);\n          break;\n        case \"Stroke\":\n          this.setState({\n            stroke1: [strokestate[0], strokestate[1], false, strokestate[3], strokestate[4]]\n          }, callback);\n          break;\n        case \"Tap\":\n          this.setState({\n            tap1: [tapstate[0], tapstate[1], false, tapstate[3], tapstate[4]]\n          }, callback);\n          break;\n        default:\n          console.log(\"activate: defaultState\", name);\n      }\n      toast(name + \" was deactivated!\");\n    } else {\n      callback();\n    }\n}\n\nemotionSelect(name, callback = () => {}){\nthis.setState({\n  eselected: true\n});\nlet tname = this.state.tname;\nswitch (name) {\n  case \"happiness\":\n    this.setState({\n      eicon: happiness,\n      ename: \"Happiness\",\n      shake: \"suggested\",\n      squeeze: \"suggested\",\n      hit: null,\n      pat: null,\n      push: null,\n      rub: null,\n      stroke: null,\n      tap: null,\n    }, callback);\n    if (tname != null) {\n      this.tactorSelect(tname.toLowerCase(), \"happiness\");\n    }\n    break;\n  case \"fear\":\n    this.setState({\n      eicon: fear,\n      ename: \"Fear\",\n      shake: \"suggested\",\n      squeeze: \"suggested\",\n      hit: null,\n      pat: null,\n      push: null,\n      rub: null,\n      stroke: null,\n      tap: null,\n    }, callback);\n    if (tname != null) {\n      this.tactorSelect(tname.toLowerCase(), \"fear\");\n    }\n    break;\n  case \"sympathy\":\n    this.setState({\n      eicon: sympathy,\n      ename: \"Sympathy\",\n      shake: \"suggested\",\n      squeeze: null,\n      hit: null,\n      pat: \"suggested\",\n      push: null,\n      rub: \"suggested\",\n      stroke: \"suggested\",\n      tap: null,\n    }, callback);\n    if (tname != null) {\n      this.tactorSelect(tname.toLowerCase(), \"sympathy\");\n    }\n    break;\n  case \"sadness\":\n    this.setState({\n      eicon: sadness,\n      ename: \"Sadness\",\n      shake: \"suggested\",\n      squeeze: \"suggested\",\n      hit: null,\n      pat: \"suggested\",\n      push: \"suggested\",\n      rub: null,\n      stroke: \"suggested\",\n      tap: null,\n    }, callback);\n    if (tname != null) {\n      this.tactorSelect(tname.toLowerCase(), \"sadness\");\n    }\n    break;\n  case \"anger\":\n    this.setState({\n      eicon: anger,\n      ename: \"Anger\",\n      shake: null,\n      squeeze: \"suggested\",\n      hit: \"suggested\",\n      pat: null,\n      push: \"suggested\",\n      rub: null,\n      stroke: null,\n      tap: null,\n    }, callback);\n    if (tname != null) {\n      this.tactorSelect(tname.toLowerCase(), \"anger\");\n    }\n    break;\n  case \"disgust\":\n    this.setState({\n      eicon: disgust,\n      ename: \"Disgust\",\n      shake: null,\n      squeeze: null,\n      hit: null,\n      pat: null,\n      push: \"suggested\",\n      rub: null,\n      stroke: null,\n      tap: null,\n    }, callback);\n    if (tname != null) {\n      this.tactorSelect(tname.toLowerCase(), \"disgust\");\n    }\n    break;\n  case \"love\":\n    this.setState({\n      eicon: love,\n      ename: \"Love\",\n      shake: \"suggested\",\n      squeeze: \"suggested\",\n      hit: null,\n      pat: \"suggested\",\n      push: null,\n      rub: \"suggested\",\n      stroke: \"suggested\",\n      tap: null,\n    }, callback);\n    if (tname != null) {\n      this.tactorSelect(tname.toLowerCase(), \"love\");\n    }\n    break;\n  case \"gratitude\":\n    this.setState({\n      eicon: gratitude,\n      ename: \"Gratitude\",\n      shake: \"suggested\",\n      squeeze: \"suggested\",\n      hit: null,\n      pat: \"suggested\",\n      push: null,\n      rub: null,\n      stroke: null,\n      tap: \"suggested\",\n    }, callback);\n    if (tname != null) {\n      this.tactorSelect(tname.toLowerCase(), \"gratitude\");\n    }\n    break;\n  default:\n    console.log(\"emotionSelect: defaultState\", name);\n}\n}\n\ntactorSelect(name, ename, callback = () => {}) {\n\n  this.setState({\n    tselected: true\n  });\n\n\n  var tr = [0, 180]; //touch range slider max and min\n  var trr = 100 / (tr[1] - tr[0]);\n  var ts = [0, 360]; //touch speed slider max and min\n  var tsr = 100 / (ts[1] - ts[0]);\n  var rs = [0, 360]; //retreat speed slider max and min\n  var rsr = 100 / (rs[1] - rs[0]);\n  var rand = [0, 50]; //touch randomness max and min\n  var randr = 100 / (rand[1] - rand[0]);\n  var ti = [0, 1000]; //touch interval max and min\n  var tir = 100 / (ti[1] - ti[0]);\n  var ir = [0, 300] // interval randomness max and min\n  var irr = 100 / (ir[1] - ir[0]);\n\n  switch (name.toLowerCase()) {\n\n    case \"shake\":\n      this.serialmsg[0] = 5;\n      this.setState({\n        ticon: shake,\n        tname: \"Shake\",\n        happiness: \"suggested\",\n        fear: null,\n        sympathy: \"suggested\",\n        sadness: \"suggested\",\n        anger: null,\n        disgust: null,\n        love: \"suggested\",\n        gratitude: \"suggested\",\n      });\n      if (ename != null) {\n        if (ename.toLowerCase() === \"gratitude\") {\n          this.setState({\n            trange: [40, 20 * trr, 50 * trr],\n            tspeed: [125, 90 * tsr, 160 * tsr],\n            rspeed: [90, 85 * rsr, 105 * rsr],\n            randomness: [12, 4 * randr, 20 * randr],\n            tint: [200, 165 * tir, 270 * tir],\n            irand: [27, 0 * irr, 87 * irr],\n          }, callback);\n        } else if (ename.toLowerCase() === \"happiness\") {\n          this.setState({\n            trange: [40, 30 * trr, 60 * trr],\n            tspeed: [108, 96 * tsr, 136 * tsr],\n            rspeed: [105, 84 * rsr, 108 * rsr],\n            randomness: [5, 0 * randr, 15 * randr],\n            tint: [160, 120 * tir, 240 * tir],\n            irand: [0, 0 * irr, 10 * irr],\n          }, callback);\n        } else if (ename.toLowerCase() === \"sadness\") {\n          this.setState({\n            trange: [40, 30 * trr, 40 * trr],\n            tspeed: [35, 30 * tsr, 35 * tsr],\n            rspeed: [48, 40 * rsr, 54 * rsr],\n            randomness: [5, 2 * randr, 8 * randr],\n            tint: [265, 247 * tir, 282 * tir],\n            irand: [0, 0 * irr, 0 * irr],\n          }, callback);\n        } else if (ename.toLowerCase() === \"sympathy\") {\n          this.setState({\n            trange: [30, 20 * trr, 40 * trr],\n            tspeed: [36, 30 * tsr, 66 * tsr],\n            rspeed: [24, 24 * rsr, 66 * rsr],\n            randomness: [0, 0 * randr, 5 * randr],\n            tint: [50, 25 * tir, 525 * tir],\n            irand: [0, 0 * irr, 20 * irr],\n          }, callback);\n        } else if (ename.toLowerCase() === \"love\") {\n          this.setState({\n            trange: [60, 40 * trr, 70 * trr],\n            tspeed: [48, 33 * tsr, 70 * tsr],\n            rspeed: [60, 50 * rsr, 66 * rsr],\n            randomness: [2, 0 * randr, 5 * randr],\n            tint: [40, 7 * tir, 252 * tir],\n            irand: [16, 9 * irr, 22 * irr],\n          }, callback);\n        } else {\n          this.setState({\n            trange: [0, 0 * trr, 0 * trr],\n            tspeed: [0, 0 * tsr, 0 * tsr],\n            rspeed: [0, 0 * rsr, 0 * rsr],\n            randomness: [0, 0 * randr, 0 * randr],\n            tint: [0, 0 * tir, 0 * tir],\n            irand: [0, 0 * irr, 0 * irr],\n          }, callback);\n        }\n      }\n      break;\n    case \"squeeze\":\n      this.serialmsg[0] = 6;\n      this.setState({\n        ticon: squeeze,\n        tname: \"Squeeze\",\n        happiness: \"suggested\",\n        fear: \"suggested\",\n        sympathy: null,\n        sadness: \"suggested\",\n        anger: \"suggested\",\n        disgust: null,\n        love: \"suggested\",\n        gratitude: \"suggested\",\n      });\n      if (ename != null) {\n        if (ename.toLowerCase() === \"anger\") {\n          this.setState({\n            trange: [60, 60 * trr, 60 * trr],\n            tspeed: [285, 257 * tsr, 315 * tsr],\n            rspeed: [120, 99 * rsr, 153 * rsr],\n            randomness: [17, 13 * randr, 21 * randr],\n            tint: [135, 117 * tir, 152 * tir],\n            irand: [97, 83 * irr, 111 * irr],\n          }, callback);\n        } else if (ename.toLowerCase() === \"fear\") {\n          this.setState({\n            trange: [40, 20 * trr, 40 * trr],\n            tspeed: [165, 105 * tsr, 204 * tsr],\n            rspeed: [120, 72 * rsr, 156 * rsr],\n            randomness: [10, 10 * randr, 25 * randr],\n            tint: [160, 50 * tir, 250 * tir],\n            irand: [30, 0 * irr, 60 * irr],\n          }, callback);\n        } else if (ename.toLowerCase() === \"gratitude\") {\n          this.setState({\n            trange: [50, 40 * trr, 50 * trr],\n            tspeed: [82, 70 * tsr, 94 * tsr],\n            rspeed: [60, 50 * rsr, 70 * rsr],\n            randomness: [8, 4 * randr, 11 * randr],\n            tint: [635, 467 * tir, 802 * tir],\n            irand: [25, 12 * irr, 40 * irr],\n          }, callback);\n        } else if (ename.toLowerCase() === \"happiness\") {\n          this.setState({\n            trange: [70, 60 * trr, 80 * trr],\n            tspeed: [133, 132 * tsr, 135 * tsr],\n            rspeed: [144, 126 * rsr, 162 * rsr],\n            randomness: [12, 8 * randr, 16 * randr],\n            tint: [50, 25 * tir, 75 * tir],\n            irand: [0, 0 * irr, 0 * irr],\n          }, callback);\n        } else if (ename.toLowerCase() === \"love\") {\n          this.setState({\n            trange: [70, 50 * trr, 90 * trr],\n            tspeed: [72, 72 * tsr, 72 * tsr],\n            rspeed: [48, 42 * rsr, 54 * rsr],\n            randomness: [0, 0 * randr, 5 * randr],\n            tint: [10, 5 * tir, 155 * tir],\n            irand: [0, 0 * irr, 24 * irr],\n          }, callback);\n        } else {\n          this.setState({\n            trange: [0, 0 * trr, 0 * trr],\n            tspeed: [0, 0 * tsr, 0 * tsr],\n            rspeed: [0, 0 * rsr, 0 * rsr],\n            randomness: [0, 0 * randr, 0 * randr],\n            tint: [0, 0 * tir, 0 * tir],\n            irand: [0, 0 * irr, 0 * irr],\n          }, callback);\n        }\n      }\n      break;\n    case \"hit\":\n      this.serialmsg[0] = 2;\n      this.setState({\n        ticon: hit,\n        tname: \"Hit\",\n        happiness: null,\n        fear: null,\n        sympathy: null,\n        sadness: null,\n        anger: \"anger\",\n        disgust: null,\n        love: null,\n        gratitude: null,\n      });\n      if (ename != null) {\n        if (ename.toLowerCase() === \"anger\") {\n          this.setState({\n            trange: [70, 30 * trr, 70 * trr],\n            tspeed: [225, 198 * tsr, 258 * tsr],\n            rspeed: [90, 66 * rsr, 132 * rsr],\n            randomness: [5, 0 * randr, 5 * randr],\n            tint: [280, 170 * tir, 290 * tir],\n            irand: [0, 0 * irr, 40 * irr],\n          }, callback);\n        } else {\n          this.setState({\n            trange: [0, 0 * trr, 0 * trr],\n            tspeed: [0, 0 * tsr, 0 * tsr],\n            rspeed: [0, 0 * rsr, 0 * rsr],\n            randomness: [0, 0 * randr, 0 * randr],\n            tint: [0, 0 * tir, 0 * tir],\n            irand: [0, 0 * irr, 0 * irr],\n          }, callback);\n        }\n      }\n      break;\n    case \"pat\":\n      this.serialmsg[0] = 2;\n      this.setState({\n        ticon: pat,\n        tname: \"Pat\",\n        happiness: null,\n        fear: null,\n        sympathy: \"suggested\",\n        sadness: \"suggested\",\n        anger: null,\n        disgust: null,\n        love: \"suggested\",\n        gratitude: \"suggested\",\n      });\n      if (ename != null) {\n        if (ename.toLowerCase() === \"gratitude\") {\n          this.setState({\n            trange: [50, 40 * trr, 50 * trr],\n            tspeed: [82, 70 * tsr, 94 * tsr],\n            rspeed: [60, 50 * rsr, 70 * rsr],\n            randomness: [8, 4 * randr, 15 * randr],\n            tint: [635, 467 * tir, 802 * tir],\n            irand: [25, 12 * irr, 38 * irr],\n          }, callback);\n        } else if (ename.toLowerCase() === \"love\") {\n          this.setState({\n            trange: [60, 40 * trr, 60 * trr],\n            tspeed: [90, 87 * tsr, 93 * tsr],\n            rspeed: [48, 46 * rsr, 48 * rsr],\n            randomness: [0, 0 * randr, 5 * randr],\n            tint: [280, 255 * tir, 375 * tir],\n            irand: [0, 0 * irr, 0 * irr],\n          }, callback);\n        } else if (ename.toLowerCase() === \"sadness\") {\n          this.setState({\n            trange: [40, 30 * trr, 60 * trr],\n            tspeed: [50, 30 * tsr, 71 * tsr],\n            rspeed: [42, 27 * rsr, 57 * rsr],\n            randomness: [2, 0 * randr, 9 * randr],\n            tint: [320, 262 * tir, 422 * tir],\n            irand: [15, 0 * irr, 52 * irr],\n          }, callback);\n        } else if (ename.toLowerCase() === \"sympathy\") {\n          this.setState({\n            trange: [40, 30 * trr, 50 * trr],\n            tspeed: [36, 30 * tsr, 63 * tsr],\n            rspeed: [33, 25 * rsr, 45 * rsr],\n            randomness: [12, 8 * randr, 16 * randr],\n            tint: [50, 25 * tir, 75 * tir],\n            irand: [0, 0 * irr, 0 * irr],\n          }, callback);\n        } else {\n          this.setState({\n            trange: [0, 0 * trr, 0 * trr],\n            tspeed: [0, 0 * tsr, 0 * tsr],\n            rspeed: [0, 0 * rsr, 0 * rsr],\n            randomness: [0, 0 * randr, 0 * randr],\n            tint: [0, 0 * tir, 0 * tir],\n            irand: [0, 0 * irr, 0 * irr],\n          }, callback);\n        }\n      }\n      break;\n    case \"push\":\n      this.serialmsg[0] = 3;\n      this.setState({\n        ticon: push,\n        tname: \"Push\",\n        happiness: null,\n        fear: null,\n        sympathy: null,\n        sadness: \"suggested\",\n        anger: \"suggested\",\n        disgust: \"suggested\",\n        love: null,\n        gratitude: null,\n      });\n      if (ename != null) {\n        if (ename.toLowerCase() === \"anger\") {\n          this.setState({\n            trange: [60, 50 * trr, 70 * trr],\n            tspeed: [105, 96 * tsr, 144 * tsr],\n            rspeed: [120, 84 * rsr, 144 * rsr],\n            randomness: [10, 0 * randr, 15 * randr],\n            tint: [0, 0 * tir, 300 * tir],\n            irand: [0, 0 * irr, 70 * irr],\n          }, callback);\n        } else if (ename.toLowerCase() === \"disgust\") {\n          this.setState({\n            trange: [40, 30 * trr, 50 * trr],\n            tspeed: [105, 30 * tsr, 168 * tsr],\n            rspeed: [70, 60 * rsr, 90 * rsr],\n            randomness: [0, 0 * randr, 25 * randr],\n            tint: [220, 50 * tir, 370 * tir],\n            irand: [0, 0 * irr, 65 * irr],\n          }, callback);\n        } else if (ename.toLowerCase() === \"sadness\") {\n          this.setState({\n            trange: [50, 40 * trr, 50 * trr],\n            tspeed: [54, 39 * tsr, 70 * tsr],\n            rspeed: [66, 57 * rsr, 75 * rsr],\n            randomness: [5, 5 * randr, 5 * randr],\n            tint: [390, 230 * tir, 550 * tir],\n            irand: [50, 45 * irr, 55 * irr],\n          }, callback);\n        } else {\n          this.setState({\n            trange: [0, 0 * trr, 0 * trr],\n            tspeed: [0, 0 * tsr, 0 * tsr],\n            rspeed: [0, 0 * rsr, 0 * rsr],\n            randomness: [0, 0 * randr, 0 * randr],\n            tint: [0, 0 * tir, 0 * tir],\n            irand: [0, 0 * irr, 0 * irr],\n          }, callback);\n        }\n      }\n      break;\n    case \"rub\":\n      this.serialmsg[0] = 4;\n      this.setState({\n        ticon: rub,\n        tname: \"Rub\",\n        happiness: null,\n        fear: null,\n        sympathy: \"suggested\",\n        sadness: null,\n        anger: null,\n        disgust: null,\n        love: \"suggested\",\n        gratitude: null,\n      });\n      this.setState({\n        trange: [0, 0 * trr, 0 * trr],\n        tspeed: [0, 0 * tsr, 0 * tsr],\n        rspeed: [0, 0 * rsr, 0 * rsr],\n        randomness: [0, 0 * randr, 0 * randr],\n        tint: [0, 0 * tir, 0 * tir],\n        irand: [0, 0 * irr, 0 * irr],\n      }, callback);\n      break;\n    case \"stroke\":\n      this.serialmsg[0] = 7;\n      this.setState({\n        ticon: stroke,\n        tname: \"Stroke\",\n        happiness: null,\n        fear: null,\n        sympathy: \"suggested\",\n        sadness: \"suggested\",\n        anger: null,\n        disgust: null,\n        love: \"suggested\",\n        gratitude: null,\n      });\n      this.setState({\n        trange: [0, 0 * trr, 0 * trr],\n        tspeed: [0, 0 * tsr, 0 * tsr],\n        rspeed: [0, 0 * rsr, 0 * rsr],\n        randomness: [0, 0 * randr, 0 * randr],\n        tint: [0, 0 * tir, 0 * tir],\n        irand: [0, 0 * irr, 0 * irr],\n      }, callback);\n      break;\n    case \"tap\":\n      this.serialmsg[0] = 8;\n      this.setState({\n        ticon: tap,\n        tname: \"Tap\",\n        happiness: null,\n        fear: null,\n        sympathy: null,\n        sadness: null,\n        anger: null,\n        disgust: null,\n        love: null,\n        gratitude: \"suggested\",\n      });\n      if (ename != null) {\n        if (ename.toLowerCase() === \"anger\") {\n          this.setState({\n            trange: [50, 40 * trr, 70 * trr],\n            tspeed: [125, 110 * tsr, 140 * tsr],\n            rspeed: [85, 72 * rsr, 90 * rsr],\n            randomness: [5, 3 * randr, 15 * randr],\n            tint: [300, 190 * tir, 480 * tir],\n            irand: [20, 10 * irr, 40 * irr],\n          }, callback);\n        } else {\n          this.setState({\n            trange: [0, 0 * trr, 0 * trr],\n            tspeed: [0, 0 * tsr, 0 * tsr],\n            rspeed: [0, 0 * rsr, 0 * rsr],\n            randomness: [0, 0 * randr, 0 * randr],\n            tint: [0, 0 * tir, 0 * tir],\n            irand: [0, 0 * irr, 0 * irr],\n          }, callback);\n        }\n      }\n      break;\n    default:\n      console.log(\"tactorSelect: defaultState\", name);\n  }\n}\n\nbitshift(number){\n  let data=new Uint8Array(2);\n  data[0] = number & 0xFF;\n  data[1] = (number >> 8) & 0xFF;\n  let reverse=data.join();\n  reverse = reverse.replace(',','')\n  console.log(parseInt(reverse,reverse.length));\n  return data;\n}\n\nhandleSlider(name){\nswitch (name) {\n  case \"trange\":\n    let tranger = [this.state.trange];\n    tranger[0] = document.getElementById(\"touch-range\").value;\n    this.setState({trange: tranger});\n    this.serialmsg[3] = tranger[0];\n    break;\n  case \"tspeed\":\n    let tspeeder = [this.state.tspeed];\n    tspeeder[0] = document.getElementById(\"speed-touch\").value;\n    this.setState({tspeed: tspeeder});\n    this.serialmsg[1] = (tspeeder[0]/15);\n    break;\n  case \"rspeed\":\n    let rspeeder = [this.state.rspeed];\n    rspeeder[0] = document.getElementById(\"speed-retreat\").value;\n    this.setState({rspeed: rspeeder});\n    this.serialmsg[2] = (rspeeder[0]/15);\n    break;\n  case \"randomness\":\n    let rander = [this.state.randomness];\n    rander[0] = document.getElementById(\"touch-randomness\").value;\n    this.setState({randomness: rander});\n    this.serialmsg[4] = rander[0];\n    break;\n  case \"tint\":\n    let tinter = [this.state.tint];\n    tinter[0] = document.getElementById(\"touch-interval\").value;\n    this.setState({tint:tinter});\n    this.serialmsg[7] = (tinter[0]/10);\n    break;\n  case \"irand\":\n    let irander = [this.state.irand];\n    irander[0] = document.getElementById(\"interval-randomness\").value;\n    this.setState({irand:irander});\n    this.serialmsg[5] = irander[0];\n    break;\n    default: console.log(\"handleSlider: defaultState\", name);\n\n}\n  console.log(this.serialmsg);\n  this.start(this.serialmsg);\n\n}\n\npp(play) {\n  if (this.state.tselected) {\n    if (play) {\n      this.serialmsg[8] = 0;\n    } else {\n      this.serialmsg[8] = 1;\n    }\n    console.log(this.serialmsg);\n    this.start(this.serialmsg);\n  } else {\n    toast(\"Tactor not selected, you must select a tactor before uploading tactor behavior.\");\n  }\n\n  //this.start(this.serialmsg);\n}\n\ncomponentDidMount(){\n    this.getArchiveData();\n}\n\ngetArchiveData(){\n  return fetch('https://akshaybaweja.com/ran/api.php/archive/'+this.state.username)\n  .then(response => response.json())\n  .then(data => {\n    if (Array.isArray(data.results)) {\n      this.setState({ archiveData: data.results});\n    } else {\n      this.setState({ archiveData: []});\n    }\n  });\n}\n\ndeleteFromArchive(item){\n  if(window.confirm('Are you sure you want to delete - ' + item.name + '?')){\n    return fetch('https://akshaybaweja.com/ran/api.php/archive/'+this.state.username+'/'+item.id+'/delete')\n    .then(response => response.json())\n    .then(data => {\n      if(data.response === \"success\"){\n        toast(({ closeToast }) => <div>Deleted [<b>{item.name}</b>]</div>);\n        this.getArchiveData();\n      } else {\n        toast(({ closeToast }) => <div>ERROR: Couldn't delete [<b>{item.name}</b>]</div>);\n      }\n    })\n  }\n}\n\nsetFromArchive(item){\n  let routine = () => {\n    this.emotionSelect(item.emotion.toLowerCase(), () => {\n      this.tactorSelect(item.tactor.toLowerCase(), this.state.ename, () => {\n\n        let params = item.params;\n\n        let tranger = this.state.trange;\n        tranger[0] = params.touch_range;\n\n        let tspeeder = this.state.tspeed;\n        tspeeder[0] = params.touch_speed;\n\n        let rspeeder = this.state.rspeed;\n        rspeeder[0] = params.retreat_speed;\n\n        let rander = this.state.randomness;\n        rander[0] = params.touch_random;\n\n        let tinter = this.state.tint;\n        tinter[0] = params.touch_interval;\n\n        let irander = this.state.irand;\n        irander[0] = params.interval_random;\n\n        this.setState({\n          trange: tranger,\n          tspeed: tspeeder,\n          rspeed: rspeeder,\n          randomness: rander,\n          tint: tinter,\n          irand: irander,\n          fileName: item.name\n        }, () => {\n          this.handleClick(\"tgen\");\n          this.handleClick(\"behavior\");\n        });\n      });\n    });\n  }\n\n  if (this.isActive(item.tactor)) {\n    routine();\n  } else {\n    if (window.confirm(\"The required tactor is not activated.\\nDo you want to activate it now?\")) {\n      this.handleClick(\"tinfo\");\n      this.handleClick(item.tactor.toLowerCase() + '1');\n    } else {\n      routine();\n    }\n  }\n}\n\nrender(){\n\n//console.log(this.bitshift(400));\n\n  return(\n    <div>\n    <nav className=\"navbar top-nav navbar-expand navbar-light bg-white \">\n      <h6 className=\"navbar-brand\" onClick={() => this.handleClick(\"tbots\")}>TactorBots</h6>\n\n      <div className=\"navbar-collapse\" id=\"navbarSupportedContent\">\n        <ul className=\"top-nav navbar-nav mr-auto ml-auto d-flex align-content-center\">\n          <li className={\"top-nav nav-item active text-center \"+ this.state.generator[1]}>\n            <a className= {\"top-nav nav-link \" + this.state.generator[1]}   onClick={() => this.handleClick(\"tgen\")}>Touch Generator{this.state.generator[0]&&(<span className=\"sr-only\">(current)</span>)}</a>\n          </li>\n          <li className={\"top-nav nav-item active text-center \"+ this.state.tinfo[1]}>\n            <a className={\"top-nav nav-link \" + this.state.tinfo[1]}   onClick={() => this.handleClick(\"tinfo\")}>Tactor Information{this.state.tinfo[0]&&(<span className=\"sr-only\">(current)</span>)}</a>\n          </li>\n          <li className={\"top-nav nav-item active text-center \"+ this.state.connection[1]}>\n            <a className={\"top-nav nav-link \" + this.state.connection[1]}   onClick={() => this.handleClick(\"connection\")}>Connection{this.state.connection[0]&&(<span className=\"sr-only\">(current)</span>)}</a>\n          </li>\n          <li className={\"top-nav nav-item active text-center \"+ this.state.archive[1]}>\n            <a className={\"top-nav nav-link \" + this.state.archive[1]}    onClick={() => this.handleClick(\"archive\")}>Archive{this.state.archive[0]&&(<span className=\"sr-only\">(current)</span>)}</a>\n          </li>\n        </ul>\n        <div className=\"username\">{this.state.username} <img src={edit} alt=\"\" className=\"img-button\" onClick={() => this.handleClick(\"login\")}/></div>\n      </div>\n    </nav>\n\n    <section className=\"page-content\">\n        <main role=\"main page\">\n\n      {this.state.tinfo[0] &&(\n        <div className=\"row left-nav group1 tinfo\">\n          <div className=\"col-2 bg-light  sidebar d-flex tinfo\">\n            <div className =\"row left-nav group1\">\n              <div className=\"col-12 left-col\">\n                <nav className=\"navbar left-nav navbar-expand navbar-light\">\n                  <ul className=\"left-nav text-left tinfo\">\n                    <li className={\"left-nav tactorinfonav nav-link col col-auto tactorlink nav-link \" + this.state.hit1[1]} onClick={() => this.handleClick(\"hit1\")}>\n                    <div className=\"row flex-nowrap\">\n                      <div className=\"col\">\n                        <div className={\"tactoricon d-flex justify-content-start \" + this.state.hit1[1]}>\n                          <img src={this.state.hit1[0] ? hitw  : hit} alt=\"\" className=\"tactorinfoicon\"/>\n                        </div>\n                      </div>\n                      <div className=\"col tactinfo\">\n                        <h4 className=\"tactinfo\">Hit</h4>\n                        <br/>\n                        <h5 className=\"tactinfo\">Tactor 1</h5><img src={link} alt=\"\" className=\"tactinfo\"/><h5 className=\"tactinfo\"> Pin 2</h5>\n                      </div>\n                    </div>\n                    </li>\n                    <li className={\"left-nav tactorinfonav nav-link col col-auto tactorlink nav-link \" + this.state.pat1[1]}  onClick={() => this.handleClick(\"pat1\")}>\n                      <div className=\"row flex-nowrap\">\n                        <div className=\"col\">\n                          <div className={\"tactoricon d-flex justify-content-start \" + this.state.pat1[1]}>\n                            <img src={this.state.pat1[0] ? patw  : pat} alt=\"\" className=\"tactorinfoicon\"/>\n                          </div>\n                        </div>\n                        <div className=\"col tactinfo\">\n                          <h4 className=\"tactinfo\">Pat</h4>\n                          <br/>\n                          <h5 className=\"tactinfo\">Tactor 2</h5><img src={link} alt=\"\" className=\"tactinfo\"/><h5 className=\"tactinfo\"> Pin 2</h5>\n                        </div>\n                      </div>\n                    </li>\n                    <li className={\"left-nav tactorinfonav nav-link col col-auto tactorlink nav-link \" + this.state.push1[1]}  onClick={() => this.handleClick(\"push1\")}>\n                      <div className=\"row flex-nowrap\">\n                        <div className=\"col\">\n                          <div className={\"tactoricon d-flex justify-content-start \" + this.state.push1[1]}>\n                            <img src={this.state.push1[0] ? pushw  : push} alt=\"\" className=\"tactorinfoicon\"/>\n                          </div>\n                        </div>\n                        <div className=\"col tactinfo\">\n                          <h4 className=\"tactinfo\">Push</h4>\n                          <br/>\n                          <h5 className=\"tactinfo\">Tactor 3</h5><img src={link} alt=\"\" className=\"tactinfo\"/><h5 className=\"tactinfo\"> Pin 3</h5>\n                        </div>\n                      </div>\n                    </li>\n                    <li className={\"left-nav tactorinfonav nav-link col col-auto tactorlink nav-link \" + this.state.rub1[1]}  onClick={() => this.handleClick(\"rub1\")}>\n                      <div className=\"row flex-nowrap\">\n                        <div className=\"col\">\n                          <div className={\"tactoricon d-flex justify-content-start \" + this.state.rub1[1]}>\n                            <img src={this.state.rub1[0] ? rubw  : rub} alt=\"\" className=\"tactorinfoicon\"/>\n                          </div>\n                        </div>\n                        <div className=\"col tactinfo\">\n                          <h4 className=\"tactinfo\">Rub</h4>\n                          <br/>\n                          <h5 className=\"tactinfo\">Tactor 4</h5><img src={link} alt=\"\" className=\"tactinfo\"/><h5 className=\"tactinfo\"> Pin 4</h5>\n                        </div>\n                      </div>\n                    </li>\n                    <li className={\"left-nav tactorinfonav nav-link col col-auto tactorlink nav-link \" + this.state.shake1[1]}  onClick={() => this.handleClick(\"shake1\")}>\n                      <div className=\"row flex-nowrap\">\n                        <div className=\"col\">\n                          <div className={\"tactoricon d-flex justify-content-start \" + this.state.shake1[1]}>\n                            <img src={this.state.shake1[0] ? shakew  : shake} alt=\"\" className=\"tactorinfoicon\"/>\n                          </div>\n                        </div>\n                        <div className=\"col tactinfo\">\n                          <h4 className=\"tactinfo\">Shake</h4>\n                          <br/>\n                          <h5 className=\"tactinfo\">Tactor 5</h5><img src={link} alt=\"\" className=\"tactinfo\"/><h5 className=\"tactinfo\"> Pin 5</h5>\n                        </div>\n                      </div>\n                    </li>\n                    <li className={\"left-nav tactorinfonav nav-link col col-auto tactorlink nav-link \" + this.state.squeeze1[1]}  onClick={() => this.handleClick(\"squeeze1\")}>\n                      <div className=\"row flex-nowrap\">\n                        <div className=\"col\">\n                          <div className={\"tactoricon d-flex justify-content-start \" + this.state.squeeze1[1]}>\n                            <img src={this.state.squeeze1[0] ? squeezew  : squeeze} alt=\"\" className=\"tactorinfoicon\"/>\n                          </div>\n                        </div>\n                        <div className=\"col tactinfo\">\n                          <h4 className=\"tactinfo\">Squeeze</h4>\n                          <br/>\n                          <h5 className=\"tactinfo\">Tactor 6</h5><img src={link} alt=\"\" className=\"tactinfo\"/><h5 className=\"tactinfo\"> Pin 6</h5>\n                        </div>\n                      </div>\n                    </li>\n                    <li className={\"left-nav tactorinfonav nav-link col col-auto tactorlink nav-link \" + this.state.stroke1[1]}  onClick={() => this.handleClick(\"stroke1\")}>\n                      <div className=\"row flex-nowrap\">\n                        <div className=\"col\">\n                          <div className={\"tactoricon d-flex justify-content-start \" + this.state.stroke1[1]}>\n                            <img src={this.state.stroke1[0] ? strokew  : stroke} alt=\"\" className=\"tactorinfoicon\"/>\n                          </div>\n                        </div>\n                        <div className=\"col tactinfo\">\n                          <h4 className=\"tactinfo\">Stroke</h4>\n                          <br/>\n                          <h5 className=\"tactinfo\">Tactor 7</h5><img src={link} alt=\"\" className=\"tactinfo\"/><h5 className=\"tactinfo\"> Pin 7</h5>\n                        </div>\n                      </div>\n                    </li>\n                    <li className={\"left-nav tactorinfonav nav-link col col-auto tactorlink nav-link \" + this.state.tap1[1]}  onClick={() => this.handleClick(\"tap1\")}>\n                      <div className=\"row flex-nowrap\">\n                        <div className=\"col\">\n                          <div className={\"tactoricon d-flex justify-content-start \" + this.state.tap1[1]}>\n                            <img src={this.state.tap1[0] ? tapw  : tap} alt=\"\" className=\"tactorinfoicon\"/>\n                          </div>\n                        </div>\n                        <div className=\"col tactinfo\">\n                          <h4 className=\"tactinfo\">Tap</h4>\n                          <br/>\n                          <h5 className=\"tactinfo\">Tactor 8</h5><img src={link} alt=\"\" className=\"tactinfo\"/><h5 className=\"tactinfo\"> Pin 8</h5>\n                        </div>\n                      </div>\n                    </li>\n                  </ul>\n                </nav>\n              </div>\n            </div>\n          </div>\n          \n          \n          <div className=\"col-10 main-content\">\n            <section className=\"main-head\">\n\n              <h2>{this.state.acttact[3]} Tactor</h2>\n\n            </section>\n            \n            <section className=\"generator-table\">\n              <div className=\"row generator justify-content-center\">\n                <div className=\"col col-auto\">\n                  <div className=\"row\">\n                    <div className=\"col\">\n                  <div className=\"bg-light tactortop-box  d-flex align-items-center\">\n                  <img src={this.state.up} alt=\"\" className=\"generator-logo tactortop\"/>\n                </div>\n                </div>\n              </div>\n              <div className=\"row\">\n                <div className=\"col\">\n              <div className=\"bg-light tactorside-box  d-flex align-items-center\">\n              <img src={this.state.cut} alt=\"\" className=\"generator-logo tactorside\"/>\n            </div>\n\n              <h4 className=\"d-flex justify-content-center text-center mx-auto tactoroverview\">Tactor Overview</h4>\n            </div>\n          </div>\n                </div>\n\n\n                <div className=\"col col-auto\">\n                  <div className=\"bg-light  tactorplacement-box  tactorinfo d-flex align-items-center\">\n                    <img src={this.state.place} alt=\"\" className=\"generator-logo tactorplacement\"/>\n                  </div>\n                  <h4 className=\"text-center mx-auto\">Tactor Placement</h4>\n                </div>\n\n                <div className=\"col col-auto\">\n                  <div className=\"bg-light  tactorplacement-box  tactorinfo d-flex align-items-center\">\n\n                    {this.state.hit1[0] &&(\n                      <div className=\"row tactor-emotion d-flex justify-items-center\">\n                      <div className=\"col col-12 tactor-emotion\">\n                      <img src={anger} alt=\"\" className=\"tactor-emotion\"/>\n                      <h4 className=\"text-center tactor-emotion\">Anger</h4>\n                    </div>\n                    </div>\n                  )}\n                  {this.state.tap1[0] &&(\n                    <div className=\"row tactor-emotion d-flex justify-items-center\">\n                    <div className=\"col col-12 tactor-emotion\">\n                    <img src={gratitude} alt=\"\" className=\"tactor-emotion\"/>\n                    <h4 className=\"text-center tactor-emotion\">Gratitude</h4>\n                  </div>\n                  </div>\n                )}\n                {this.state.stroke1[0] &&(\n                  <div className=\"row tactor-emotion d-flex justify-items-center\">\n                  <div className=\"col col-7 tactor-emotion mx-auto\">\n                  <img src={love} alt=\"\" className=\"tactor-emotion\"/>\n                  <h4 className=\"text-center tactor-emotion\">Love</h4>\n                </div>\n                  <div className=\"w-100\"></div>\n                <div className=\"col col-7 tactor-emotion mx-auto\">\n                <img src={sympathy} alt=\"\" className=\"tactor-emotion\"/>\n                <h4 className=\"text-center tactor-emotion\">Sympathy</h4>\n              </div>\n              <div className=\"w-100\"></div>\n              <div className=\"col col-7 tactor-emotion mx-auto\">\n              <img src={sadness} alt=\"\" className=\"tactor-emotion\"/>\n              <h4 className=\"text-center tactor-emotion\">Sadness</h4>\n            </div>\n            </div>\n          )}{this.state.squeeze1[0] &&(\n            <div className=\"row tactor-emotion d-flex justify-items-center\">\n                  <div className=\"col col-6 tactor-emotion\">\n                  <img src={fear} alt=\"\" className=\"tactor-emotion\"/>\n                  <h4 className=\"text-center tactor-emotion\">Fear</h4>\n                </div>\n                    <div className=\"col col-6 tactor-emotion\">\n                      <img src={love} alt=\"\" className=\"tactor-emotion\"/>\n                      <h4 className=\"text-center tactor-emotion\">Love</h4>\n                    </div>\n                    <div className=\"w-100\"></div>\n                    <div className=\"col col-6 tactor-emotion\">\n                    <img src={anger} alt=\"\" className=\"tactor-emotion\"/>\n                    <h4 className=\"text-center tactor-emotion\">Anger</h4>\n                    </div>\n                    <div className=\"col col-6 tactor-emotion\">\n                      <img src={happiness} alt=\"\" className=\"tactor-emotion\"/>\n                      <h4 className=\"text-center tactor-emotion\">Happiness</h4>\n                    </div>\n                    <div className=\"w-100\"></div>\n                    <div className=\"col col-6 tactor-emotion\">\n                    <img src={gratitude} alt=\"\" className=\"tactor-emotion\"/>\n                    <h4 className=\"text-center tactor-emotion\">Gratitude</h4>\n                    </div>\n                    <div className=\"col col-6 tactor-emotion\">\n                      <img src={sadness} alt=\"\" className=\"tactor-emotion\"/>\n                      <h4 className=\"text-center tactor-emotion\">Sadness</h4>\n                    </div>\n                  </div>)}\n                    {this.state.shake1[0] &&(\n                      <div className=\"row tactor-emotion d-flex justify-items-center\">\n                            <div className=\"col col-6 tactor-emotion\">\n                            <img src={happiness} alt=\"\" className=\"tactor-emotion\"/>\n                            <h4 className=\"text-center tactor-emotion\">Happiness</h4>\n                          </div>\n                              <div className=\"col col-6 tactor-emotion\">\n                                <img src={gratitude} alt=\"\" className=\"tactor-emotion\"/>\n                                <h4 className=\"text-center tactor-emotion\">Gratitude</h4>\n                              </div>\n                              <div className=\"w-100\"></div>\n                              <div className=\"col col-6 tactor-emotion\">\n                              <img src={love} alt=\"\" className=\"tactor-emotion\"/>\n                              <h4 className=\"text-center tactor-emotion\">Love</h4>\n                              </div>\n                              <div className=\"col col-6 tactor-emotion\">\n                                <img src={sadness} alt=\"\" className=\"tactor-emotion\"/>\n                                <h4 className=\"text-center tactor-emotion\">Sadness</h4>\n                              </div>\n                              <div className=\"w-100\"></div>\n                              <div className=\"col col-6 tactor-emotion\">\n                              <img src={sympathy} alt=\"\" className=\"tactor-emotion\"/>\n                              <h4 className=\"text-center tactor-emotion\">Sympathy</h4>\n                              </div>\n                              </div>\n                            )}\n                            {this.state.rub1[0] &&(\n                              <div className=\"row tactor-emotion d-flex justify-items-center\">\n                              <div className=\"col col-7 tactor-emotion mx-auto\">\n                              <img src={love} alt=\"\" className=\"tactor-emotion\"/>\n                              <h4 className=\"text-center tactor-emotion\">Love</h4>\n                            </div>\n                            <div className=\"w-100\"></div>\n                            <div className=\"col col-7 tactor-emotion mx-auto\">\n                            <img src={sympathy} alt=\"\" className=\"tactor-emotion\"/>\n                            <h4 className=\"text-center tactor-emotion\">Sympathy</h4>\n                          </div>\n                          </div>\n                      )}  {this.state.push1[0] &&(\n                        <div className=\"row tactor-emotion d-flex justify-items-center\">\n                          <div className=\"col col-7 tactor-emotion mx-auto\">\n                          <img src={disgust} alt=\"\" className=\"tactor-emotion\"/>\n                          <h4 className=\"text-center tactor-emotion\">Disgust</h4>\n                        </div>\n                        <div className=\"w-100\"></div>\n                        <div className=\"col col-7 tactor-emotion mx-auto\">\n                        <img src={anger} alt=\"\" className=\"tactor-emotion\"/>\n                        <h4 className=\"text-center tactor-emotion\">Anger</h4>\n                      </div>\n                      <div className=\"w-100\"></div>\n                      <div className=\"col col-7 tactor-emotion mx-auto\">\n                      <img src={sadness} alt=\"\" className=\"tactor-emotion\"/>\n                      <h4 className=\"text-center tactor-emotion\">Sadness</h4>\n                    </div>\n                    </div>\n                  )}\n                  {this.state.pat1[0] &&(\n                    <div className=\"row tactor-emotion d-flex justify-items-center\">\n                          <div className=\"col col-6 tactor-emotion\">\n                          <img src={sympathy} alt=\"\" className=\"tactor-emotion\"/>\n                          <h4 className=\"text-center tactor-emotion\">Sympathy</h4>\n                        </div>\n                            <div className=\"col col-6 tactor-emotion\">\n                              <img src={love} alt=\"\" className=\"tactor-emotion\"/>\n                              <h4 className=\"text-center tactor-emotion\">Love</h4>\n                            </div>\n                            <div className=\"w-100\"></div>\n                            <div className=\"col col-6 tactor-emotion\">\n                            <img src={gratitude} alt=\"\" className=\"tactor-emotion\"/>\n                            <h4 className=\"text-center tactor-emotion\">Gratitude</h4>\n                            </div>\n\n                            <div className=\"col col-6 tactor-emotion\">\n                              <img src={sadness} alt=\"\" className=\"tactor-emotion \"/>\n                              <h4 className=\"text-center tactor-emotion\">Sadness</h4>\n                            </div>\n                          </div>)}\n\n\n                  </div>\n                  <h4 className=\"text-center  mx-auto\">Associated Emotion</h4>\n                </div>\n              </div>\n            </section>\n            \n            <div className=\"row buttons\">\n              <div className=\"col col-3 tactorinfonav d-flex align-content-end tactselected\">\n                <div className=\"row flex-nowrap\">\n                  <div className=\"col\">\n                    <div className=\"tactoricon d-flex justify-content-start\">\n                      <img src={this.state.acttact[0]} alt=\"\" className=\"tactorinfoicon\"/>\n                    </div>\n                  </div>\n                  <div className=\"col tactinfo\">\n              <h4 className=\"tactinfo\">{this.state.acttact[3]}</h4>\n            <br/>\n              <h5 className=\"tactinfo\">{this.state.acttact[1]}</h5><img src={link} alt=\"\" className=\"tactinfo\"/><h5 className=\"tactinfo\"> {this.state.acttact[2]}</h5>\n            </div>\n\n            </div>\n          </div>\n              <div className=\"col float-right activated d-flex align-items-end justify-content-end\">\n\n              <h4 className=\"activated\">Please make sure you have activated the tactor.</h4>\n              \n              {this.isActive(this.state.acttact[3])?\n                (<button className=\"align-items-center\" id=\"deactivated\"  onClick={() => this.deactivate(this.state.acttact[3])}>\n                  <h6 className=\"text-center deactivated\">Deactivate</h6>\n                </button>) : \n                (<button className=\"align-items-center\" id=\"activated\"  onClick={() => this.activate(this.state.acttact[3])}>\n                  <h6 className=\"text-center activated\">Activate</h6>\n                </button>)}\n\n            </div>\n          </div>\n          </div>\n        </div>\n      )}\n\n      {this.state.generator[0] && (\n        <div className =\"row left-nav group1 dflex flex-nowrap\">\n              <div className=\"col col-2 bg-light  sidebar d-flex\">\n                <div className =\"row left-nav group1\">\n                  <div className=\"col-12 left-col\">\n                    <nav className=\"navbar left-nav navbar-expand navbar-light\">\n                      <ul className=\"left-nav nav-item text-left\">\n                        <li className={\"left-nav nav-link \" + this.state.estate}    onClick={() => this.handleClick(\"emotion\")}>\n                          <a className=\"left-nav nav-link\">\n                            <img src={emotion} alt=\"\" className=\"left-nav icon\"/>\n                            Emotion\n                          </a>\n                        </li>\n\n                        {this.state.eselected && (\n                          <div className=\"row justify-content-center\">\n                            <div className=\"col col-auto bg-white sidebar-emotion-box\">\n                              <img src={this.state.eicon} alt=\"\" className=\"emotion-logo happiness sidebar-emotion\" />\n                              <h4 className=\"text-center\">{this.state.ename}</h4>\n                            </div>\n                          </div>\n                        )}\n\n                        <li className={\"left-nav nav-link \" + this.state.tstate}   onClick={() => this.handleClick(\"tactor\")}>\n                          <a className=\"left-nav nav-link\" >\n                            <img src={tactor} alt=\"\" className=\"left-nav icon\"/>\n                            Tactor\n                          </a>\n                        </li>\n\n                        {this.state.tselected && (\n                        <div className=\"row justify-content-center\">\n                          <div className=\"col col-auto bg-white sidebar-tactor-box\">\n                            <img src={this.state.ticon} alt=\"\" className=\"tactor-logo happiness sidebar-tactor\"/>\n                            <h4 className=\"text-center\">{this.state.tname}</h4>\n                          </div>\n                        </div>\n                        )}\n\n                        <li className={\"left-nav nav-link \"+ this.state.bstate}  >\n                          <a className=\"left-nav nav-link\" onClick={() => this.handleClick(\"behavior\")}>\n                            <img src={behavior} alt=\"\" className=\"left-nav icon\"/>\n                            Touch\n                          </a>\n                        </li>\n                      </ul>\n                    </nav>\n                  </div>\n                </div>\n\n\n              </div>\n\n              {this.state.home && (\n\n              <div className=\"col col-10 main-content\">\n              <section className=\"main-head\">\n\n\n                <h2>Touch Generator</h2>\n                <h3>Create a new emotional robot touch clip</h3>\n\n              </section>\n              <section className=\"generator-table\">\n                <div className=\"row generator justify-content-center\">\n                  <div className=\"col col-auto\" >\n                    <div className=\"bg-light touchgen-box touchgen d-flex align-items-center\" onClick={() => this.handleClick(\"emotion\")}>\n                    <img src={neutral} alt=\"\" className=\"generator-logo\"/>\n                  </div>\n\n                    <h4 className=\"text-center text-uppercase mx-auto\">Emotion</h4>\n\n                  </div>\n                  <div className=\"col col-auto d-flex align-items-center\">\n                    <h2 className=\"generator\">OR</h2>\n                    </div>\n                  <div className=\"col col-auto\">\n                    <div className=\"bg-light  touchgen-box  touchgen d-flex align-items-center\" onClick={() => this.handleClick(\"tactor\")}>\n                      <img src={squeeze} alt=\"\" className=\"generator-logo\"/>\n                    </div>\n                    <h4 className=\"text-center text-uppercase mx-auto\">Tactor</h4>\n                  </div>\n                </div>\n\n              </section>\n              </div>\n            )}\n\n            {this.state.emotion && (\n              <div className=\"col-10 main-content\">\n              <section className=\"main-head\">\n\n\n                <h2>Emotion</h2>\n                <h3>Select one emotion to start</h3>\n\n              </section>\n              <section className=\"emotion-table\">\n                <div className=\"row emotion\">\n                  <div className=\"col\">\n                    <div className={\"bg-light emotion-box emotion d-flex align-items-center \"+ this.state.happiness} onClick={() => (this.emotionSelect(\"happiness\"), this.handleClick(\"emotionselect\"))}>\n                    <img src={happiness} alt=\"\" className=\"emotion-logo happiness\"/>\n                  </div>\n\n                    <h4 className=\"text-center\">Happiness</h4>\n\n                  </div>\n                  <div className=\"col\">\n                    <div className={\"bg-light emotion-box emotion d-flex align-items-center \"+ this.state.fear} onClick={() => (this.emotionSelect(\"fear\"), this.handleClick(\"emotionselect\"))}>\n                      <img src={fear} alt=\"\" className=\"emotion-logo fear\"/>\n                    </div>\n                    <h4 className=\"text-center\">Fear</h4>\n                  </div>\n                  <div className=\"col\">\n                    <div className={\"bg-light emotion-box emotion d-flex align-items-center \"+ this.state.sympathy} onClick={() => (this.emotionSelect(\"sympathy\"), this.handleClick(\"emotionselect\"))}>\n                        <img src={sympathy} alt=\"\" className=\"emotion-logo sympathy\"/>\n                    </div>\n                    <h4 className=\"text-center\">Sympathy</h4>\n                  </div>\n                  <div className=\"col\">\n                    <div className={\"bg-light emotion-box emotion d-flex align-items-center \"+ this.state.sadness}  onClick={() => (this.emotionSelect(\"sadness\"), this.handleClick(\"emotionselect\"))}>\n                      <img src={sadness} alt=\"\" className=\"emotion-logo sadness\"/>\n                    </div>\n                    <h4 className=\"text-center\">Sadness</h4>\n                  </div>\n                </div>\n                <div className=\"row emotion\">\n                  <div className=\"col\">\n                    <div className={\"bg-light emotion-box emotion d-flex align-items-center \"+ this.state.anger} onClick={() => (this.emotionSelect(\"anger\"), this.handleClick(\"emotionselect\"))}>\n                      <img src={anger} alt=\"\" className=\"emotion-logo anger\"/>\n                  </div>\n                  <h4 className=\"text-center\">Anger</h4>\n                  </div>\n                  <div className=\"col\">\n                    <div className={\"bg-light emotion-box emotion d-flex align-items-center \"+ this.state.disgust} onClick={() => (this.emotionSelect(\"disgust\"), this.handleClick(\"emotionselect\"))}>\n                      <img src={disgust} alt=\"\" className=\"emotion-logo disgust\"/>\n                    </div>\n                    <h4 className=\"text-center\">Disgust</h4>\n                  </div>\n                  <div className=\"col\">\n                    <div className={\"bg-light emotion-box emotion d-flex align-items-center \"+ this.state.love} onClick={() => (this.emotionSelect(\"love\"), this.handleClick(\"emotionselect\"))}>\n                      <img src={love} alt=\"\" className=\"emotion-logo love\"/>\n                    </div>\n                    <h4 className=\"text-center\">Love</h4>\n                  </div>\n                  <div className=\"col\">\n                    <div className={\"bg-light emotion-box emotion d-flex align-items-center \"+ this.state.gratitude} onClick={() => (this.emotionSelect(\"gratitude\"), this.handleClick(\"emotionselect\"))}>\n                      <img src={gratitude} alt=\"\" className=\"emotion-logo gratitude\"/>\n                    </div>\n                    <h4 className=\"text-center\">Gratitude</h4>\n                  </div>\n                </div>\n              </section>\n            </div>\n            )}\n\n            {this.state.tactor && (\n              <div className=\"col-10 main-content\">\n                <section className=\"main-head\">\n\n\n                  <h2>Tactor</h2>\n                  <h3>Select one tactor, recommendation is provided based on study</h3>\n\n                </section>\n                <section className=\"emotion-table\">\n                  <div className=\"row emotion\">\n                    <div className=\"col\">\n                      <div className={\"emotion-box emotion d-flex align-items-center \" + this.state.shake}  onClick={() => (this.tactorSelect(\"shake\", this.state.ename), this.handleClick(\"shake\"))}>\n                      <img src={shake} alt=\"\" className=\"emotion-logo happiness\"/>\n                    </div>\n\n                      <h4 className=\"text-center\">Shake</h4>\n\n                    </div>\n                    <div className=\"col\">\n                      <div className={\"emotion-box emotion d-flex align-items-center \" + this.state.squeeze} onClick={() => (this.tactorSelect(\"squeeze\", this.state.ename), this.handleClick(\"squeeze\"))}>\n                        <img src={squeeze} alt=\"\" className=\"emotion-logo fear\"/>\n                      </div>\n                      <h4 className=\"text-center\">Squeeze</h4>\n                    </div>\n                    <div className=\"col\">\n                      <div className={\"emotion-box emotion d-flex align-items-center \" + this.state.hit}  onClick={() => (this.tactorSelect(\"hit\", this.state.ename), this.handleClick(\"hit\"))}>\n                          <img src={hit} alt=\"\" className=\"emotion-logo sympathy\"/>\n                      </div>\n                      <h4 className=\"text-center\">Hit</h4>\n                    </div>\n                    <div className=\"col\">\n                      <div className={\"emotion-box emotion d-flex align-items-center \" + this.state.pat}  onClick={() => (this.tactorSelect(\"pat\", this.state.ename), this.handleClick(\"pat\"))}>\n                        <img src={pat} alt=\"\" className=\"emotion-logo sadness\"/>\n                      </div>\n                      <h4 className=\"text-center\">Pat</h4>\n                    </div>\n                  </div>\n                  <div className=\"row emotion\">\n                    <div className=\"col\">\n                      <div className={\"emotion-box emotion d-flex align-items-center \" + this.state.push}  onClick={() => (this.tactorSelect(\"push\", this.state.ename), this.handleClick(\"push\"))}>\n                        <img src={push} alt=\"\" className=\"emotion-logo anger\"/>\n                    </div>\n                    <h4 className=\"text-center\">Push</h4>\n                    </div>\n                    <div className=\"col\">\n                      <div className={\"emotion-box emotion d-flex align-items-center \" + this.state.rub}  onClick={() => (this.tactorSelect(\"rub\", this.state.ename), this.handleClick(\"rub\"))}>\n                        <img src={rub} alt=\"\" className=\"emotion-logo disgust\"/>\n                      </div>\n                      <h4 className=\"text-center\">Rub</h4>\n                    </div>\n                    <div className=\"col\">\n                      <div className={\"emotion-box emotion d-flex align-items-center \" + this.state.stroke}  onClick={() => (this.tactorSelect(\"stroke\", this.state.ename), this.handleClick(\"stroke\"))}>\n                        <img src={stroke} alt=\"\" className=\"emotion-logo love\"/>\n                      </div>\n                      <h4 className=\"text-center\">Stroke</h4>\n                    </div>\n                    <div className=\"col\">\n                      <div className={\"emotion-box emotion d-flex align-items-center \" + this.state.tap}  onClick={() => (this.tactorSelect(\"tap\", this.state.ename), this.handleClick(\"tap\"))}>\n                        <img src={tap} alt=\"\" className=\"emotion-logo gratitude\"/>\n                      </div>\n                      <h4 className=\"text-center\">Tap</h4>\n                    </div>\n                  </div>\n                </section>\n              </div>\n            )}\n\n            {this.state.behavior && (\n              <div className=\"col-10 main-content\">\n                <section className=\"main-head\">\n\n\n                  <h2>Touch</h2>\n                  <h3>Default setting recommended range are showed in the dashboard</h3>\n\n                </section>\n                <section className=\"touch-config\">\n                  <div className=\"row touch\">\n                    <div className=\"col\">\n                      <div className=\"bg-light dashboard-box\">\n                          <h4 className=\"\">Dashboard</h4>\n                          <div className=\"slider-div\">\n                            <h6 className=\"slider-label\">Touch Range (degree)</h6>\n                            <h6 className=\"slider-value float-right\">{this.state.trange[0]}</h6>\n                            <br/>\n                            <img src={trange} alt=\"\" className=\"slider-icon\"/>\n                          <input type=\"range\" className=\"slider\" id=\"touch-range\" name=\"touch-range\" value={this.state.trange[0]} onInput={() => (this.handleSlider(\"trange\"))}  min=\"0\" max=\"180\" step=\"10\" style={{background: 'linear-gradient(90deg, rgba(255,255,255,1) '+this.state.trange[1]+'%, rgba(244,179,33,1) '+this.state.trange[1]+'%, rgba(244,179,33,1) '+this.state.trange[2]+ '%, rgba(255,255,255,1) '+ this.state.trange[2]+ '%)'}}/>\n                          </div>\n\n                          <div className=\"slider-div\">\n                            <h6 className=\"slider-label\">Speed of Touching (degree/s)</h6>\n                            <h6 className=\"slider-value float-right\">{this.state.tspeed[0]}</h6>\n                            <br/>\n                            <img src={tspeed} alt=\"\" className=\"slider-icon\"/>\n                          <input type=\"range\" className=\"slider\" id=\"speed-touch\" name=\"speed-touch\" value={this.state.tspeed[0]} onInput={() => (this.handleSlider(\"tspeed\"))}  min=\"0\" max=\"360\" step=\"15\" style={{background: 'linear-gradient(90deg, rgba(255,255,255,1) '+this.state.tspeed[1]+'%, rgba(244,179,33,1) '+this.state.tspeed[1]+'%, rgba(244,179,33,1) '+this.state.tspeed[2]+ '%, rgba(255,255,255,1) '+ this.state.tspeed[2]+ '%)'}}/>\n                          </div>\n\n                          <div className=\"slider-div\">\n                            <h6 className=\"slider-label\">Speed of Retreating (degree/s)</h6>\n                            <h6 className=\"slider-value float-right\">{this.state.rspeed[0]}</h6>\n                            <br/>\n                            <img src={rspeed} alt=\"\" className=\"slider-icon\"/>\n                          <input type=\"range\" className=\"slider\" id=\"speed-retreat\" value={this.state.rspeed[0]} onInput={() => (this.handleSlider(\"rspeed\"))}  min=\"0\" max=\"360\" step=\"15\" style={{background: 'linear-gradient(90deg, rgba(255,255,255,1) '+this.state.rspeed[1]+'%, rgba(244,179,33,1) '+this.state.rspeed[1]+'%, rgba(244,179,33,1) '+this.state.rspeed[2]+ '%, rgba(255,255,255,1) '+ this.state.rspeed[2]+ '%)'}}/>\n                          </div>\n\n                          <div className=\"slider-div\">\n                            <h6 className=\"slider-label\">Touch Randomness (Tremble)</h6>\n                            <h6 className=\"slider-value float-right\">{this.state.randomness[0]}</h6>\n                            <br/>\n                            <img src={randomness} alt=\"\" className=\"slider-icon\"/>\n                          <input type=\"range\" className=\"slider\" id=\"touch-randomness\" value={this.state.randomness[0]} onInput={() => (this.handleSlider(\"randomness\"))}  min=\"0\" max=\"50\" step=\"5\" style={{background: 'linear-gradient(90deg, rgba(255,255,255,1) '+this.state.randomness[1]+'%, rgba(244,179,33,1) '+this.state.randomness[1]+'%, rgba(244,179,33,1) '+this.state.randomness[2]+ '%, rgba(255,255,255,1) '+ this.state.randomness[2]+ '%)'}}/>\n                          </div>\n\n                          <div className=\"slider-div\">\n                            <h6 className=\"slider-label\">Touch Interval (ms)</h6>\n                            <h6 className=\"slider-value float-right\">{this.state.tint[0]}</h6>\n                            <br/>\n                            <img src={tint} alt=\"\" className=\"slider-icon\"/>\n                          <input type=\"range\" className=\"slider\" id=\"touch-interval\" value={this.state.tint[0]} onInput={() => (this.handleSlider(\"tint\"))}  min=\"0\" max=\"1000\" step=\"10\" style={{background: 'linear-gradient(90deg, rgba(255,255,255,1) '+this.state.tint[1]+'%, rgba(244,179,33,1) '+this.state.tint[1]+'%, rgba(244,179,33,1) '+this.state.tint[2]+ '%, rgba(255,255,255,1) '+ this.state.tint[2]+ '%)'}}/>\n                          </div>\n\n                          <div className=\"slider-div\">\n                            <h6 className=\"slider-label\">Interval Randomness</h6>\n                            <h6 className=\"slider-value float-right\">{this.state.irand[0]}</h6>\n                            <br/>\n                            <img src={irand} alt=\"\" className=\"slider-icon\"/>\n                          <input type=\"range\" className=\"slider\" id=\"interval-randomness\" value={this.state.irand[0]} onInput={() => (this.handleSlider(\"irand\"))} min=\"0\" max=\"300\" step=\"10\" style={{background: 'linear-gradient(90deg, rgba(255,255,255,1) '+this.state.irand[1]+'%, rgba(244,179,33,1) '+this.state.irand[1]+'%, rgba(244,179,33,1) '+this.state.irand[2]+ '%, rgba(255,255,255,1) '+ this.state.irand[2]+ '%)'}}/>\n                          </div>\n                    </div>\n\n                    </div>\n                    <div className=\"col\">\n                      <div className=\"bg-light  dashboard-box\">\n                          <h4 className=\"\">Motion (degree/s)</h4>\n                            <div className=\"graph\">\n                            <Sketch\n                    \t\t\t\t\tsetup={(p5, parentRef) => {\n                    \t\t\t\t\t\tp5.createCanvas(550, 200).parent(parentRef);\n\n                    \t\t\t\t\t}}\n                    \t\t\t\t\tdraw={p5 => {\n                    \t\t\t\t\t\tp5.background(\"#f8f9fa\");\n                    \t\t\t\t\t\tp5.fill(255, this.y * 1.3, 0);\n                                let touchRange = this.state.trange[0];\n                                let speedOfTouching = this.state.tspeed[0];\n                                let speedOfRetreating = this.state.rspeed[0];\n                                let touchRandomness = this.state.randomness[0];\n                                let touchInverval =this.state.tint[0];\n                                let intervalRandomness = this.state.irand[0];\n                                let amplitude = 8;\n                                \n                                if(!this.from){\n                                  if (this.count <= touchRange){\n                                    this.angle = this.count + p5.random(touchRandomness);\n                                    this.timer = p5.millis();\n                                  } else {\n\n                                    let delay = touchInverval + p5.random(intervalRandomness);\n                                    //let timer = millis();\n                                    if((p5.millis()-this.timer)>delay){\n                                      this.count = 0;\n                                      this.from = true;\n                                    }\n                                  }\n                                  this.count = this.count + speedOfTouching * 0.001*60;\n                                }\n\n                                    if(this.from){\n\n                                      if (this.count <= touchRange){\n                                        this.angle = p5.abs(touchRange -(this.count + p5.random(touchRandomness)));\n                                        this.timer = p5.millis();\n\n                                      } else {\n\n                                          this.count = 0;\n                                          this.from = false;\n                                      }\n                                      this.count = this.count + speedOfRetreating * 0.001*60;\n                                    }\n\n\n\n                                    //console.log(this.angle);\n\n                                    p5.push();\n                                    p5.stroke(220);\n                                    p5.strokeWeight(2);\n                                    p5.noFill();\n                                    p5.rect(0, 0, 550, 200);\n                                    p5.pop();\n                                    var vol = this.angle;\n                                    this.volhistory.push(vol);\n                                    p5.stroke(50);\n\n                                    //strokeWeight(1);\n                                    p5.noFill();\n                                    p5.push();\n                                    p5.strokeWeight(2);\n                                    //var currentY = map(vol, 0, 40, height, 0);\n                                    p5.translate(0, 40);\n                                    p5.beginShape();\n                                    for (var i = 0; i < this.volhistory.length; i += 4) {\n                                      var y = p5.map(this.volhistory[i], 0, 180, 150, 0);\n                                    //var y = 100 - volhistory[i];\n                                      p5.vertex(i, y);\n\n                                    }\n                                    p5.endShape();\n                                    p5.pop();\n                                    if (this.volhistory.length > 540) {\n                                    this.volhistory.splice(0, 4);\n                                    }\n\n                                    // p5.push();\n                                    // p5.stroke(100);\n                                    // p5.strokeWeight(2);\n                                    // p5.noFill();\n                                    // p5.circle(30,50,50);\n                                    // p5.rect(60, 83, 247, 120);\n                                    // p5.pop();\n                                    // var vol = this.angle;\n                                    // this.volhistory.push(vol);\n                                    // p5.stroke(50);\n                                    // //strokeWeight(1);\n                                    // p5.noFill();\n                                    // p5.push();\n                                    // p5.strokeWeight(2);\n                                    // p5.translate(0, p5.height - 80);\n                                    // p5.beginShape();\n                                    // for (var i = 0; i < this.volhistory.length; i += 4) {\n                                    //   var y = p5.map(this.volhistory[i], 0, 180, 180, 0);\n                                    //   //var y = 100 - volhistory[i];\n                                    //   p5.vertex(i, y);\n                                    //   console.log(i, y);\n                                    // }\n                                    // p5.endShape();\n                                    // p5.pop();\n                                    // if (this.volhistory.length > 20) {\n                                    //   this.volhistory.splice(0, 4);\n                                    // }\n                                    this.x = this.x+1;\n                    \t\t\t\t\t}}\n                    \t\t\t\t/>\n                            </div>\n                            <div className=\"d-flex justify-content-center pp\">\n                            <img src={play} alt=\"\" id=\"play-icon\" onClick={()=> (this.pp(true))} />\n                            <img src={pause} alt=\"\" id=\"pause-icon\" onClick={()=> (this.pp(false))}/>\n                          </div>\n                      </div>\n                      <div className=\"name-input\">\n                        <h6 className=\"name-label\">Name</h6>\n                        <input type=\"text\" className=\"text-input\" value={this.state.fileName} onChange={this.handleChange}/>\n                        <button className=\"archive float-right\">\n                        <h6 className=\"archive slider-label\" onClick={()=>this.handleClick(\"archive\")}>Refer to Archive</h6>\n                        <img src={arrow} alt=\"\" className=\"archive\" onClick={()=>this.handleClick(\"archive\")}/>\n                      </button>\n                      </div>\n                      <div className=\"buttons\" id=\"archive-functions\">\n                        \n                        <button className=\"float-right button-white\" id=\"save\" onClick={()=>this.handleClick(\"save2archive\")}>\n                          <h6>Save</h6>\n                        </button>\n                        \n                        <button className=\"float-right button-black\" id=\"export\" onClick={()=>toast(\"Feature not active\")}>\n                          <h6>Export</h6>\n                        </button>\n\n                      </div>\n                    </div>\n\n                  </div>\n                  </section>\n\n                </div>\n            )}\n\n            </div>\n      )}\n\n      {this.state.connection[0] && (\n        <div className =\"row left-nav group1 dflex flex-nowrap\">\n              <div className=\"col col-2 bg-light  sidebar d-flex\">\n                <div className =\"row left-nav group1\">\n                  <div className=\"col-12 left-col\">\n                    <nav className=\"navbar left-nav navbar-expand navbar-light\">\n                      <ul className=\"left-nav nav-item text-left\">\n                        <li className={\"left-nav nav-link \" + this.state.hcstate}    onClick={() => this.handleClick(\"homeConnect\")}>\n                          <a className=\"left-nav nav-link\">\n                            <img src={homeconnect} alt=\"\" className=\"left-nav icon\"/>\n                            Home Connection\n                          </a>\n                        </li>\n\n                        <li className={\"left-nav nav-link \" + this.state.scstate}   onClick={() => this.handleClick(\"serialConnect\")}>\n                          <a className=\"left-nav nav-link\" >\n                            <img src={serialconnect} alt=\"\" className=\"left-nav icon\"/>\n                            Serial Connection\n                          </a>\n                        </li>\n\n                        <li className={\"left-nav nav-link \"+ this.state.tcstate}  >\n                          <a className=\"left-nav nav-link\" onClick={() => this.handleClick(\"tactorConnect\")}>\n                            <img src={tactorconnect} alt=\"\" className=\"left-nav icon\"/>\n                            Tactor Connection\n                          </a>\n                        </li>\n                      </ul>\n                    </nav>\n                  </div>\n                </div>\n              </div>\n\n            {this.state.homeconnect && (\n              <div className=\"col-10 main-content\">\n              <section className=\"main-head\">\n                <h2>Home Connection</h2>\n                {console.log(this.getSerialPorts())}\n              </section>\n              <section className=\"home-connect-table\">\n                <div className=\"row home-connect-row\">\n                  <div className=\"col\">\n                    <div className=\"col-header\">\n                      <h3 className=\"home-connect\">Step 1: Connect to PC</h3>\n                    </div>\n                    <div className={\"bg-light home-connect-box home-connect d-flex align-items-center\"}>\n                      <img src={homeconnect_pc} alt=\"\" className=\"center-image\"/>\n                    </div>\n                    <div className=\"col-footer\">\n                      <h4 className=\"home-connect text-center\">Connect the home module to the PC</h4>\n                    </div>\n                  </div>\n                  <div className=\"col\">\n                    <div className=\"col-header\">\n                      <h3 className=\"home-connect\">Step 2: Connect to external power supply</h3>\n                    </div>\n                    <div className={\"bg-light home-connect-box home-connect d-flex align-items-center \"}>\n                      <img src={homeconnect_power} alt=\"\" className=\"center-image\"/>\n                    </div>\n                    <div className=\"col-footer\">\n                      <h4 className=\"home-connect text-center\">Connect the home device to the extra power<br/>(optional when running less then 4 tactors at a time) </h4>\n                    </div>\n                  </div>\n                </div>\n                <div className=\"row home-connect-row\">\n                  <div className=\"col\">\n                    <button className=\"align-items-center connection-button\" onClick={() => this.handleClick(\"serialConnect\")}>\n                        <h6 className=\"text-center\">Next</h6>\n                    </button>\n                  </div>\n                </div>\n                \n              </section>\n            </div>\n            )}\n\n            {this.state.serialconnect && (\n              <div className=\"col-10 main-content\">\n                <section className=\"main-head\">\n                  <h2>Serial Connection</h2>\n                </section>\n                <section>\n                  <h3 className=\"serial-connect\">Select Serial Port</h3>\n                  <div className=\"serial-select\">\n                    <select id=\"serial-port\" className=\"serial-select\" onClick={this.handleClick(\"selectPort\")}>\n                      <option value=\"\" disabled selected>Select Serial Port</option>\n                    </select>\n                  </div>\n                </section>\n              </div>\n            )}\n\n            {this.state.tactorconnect && (\n              <div className=\"col-10 main-content\">\n                <section className=\"main-head\">\n                  <h2>Tactor Connection</h2>\n                </section>\n                <section>\n                  \n                </section>\n\n              </div>\n            )}\n\n            </div>\n      )}\n\n      {this.state.archive[0] && (\n        <div className=\"row left-nav group1\">\n\n          <div className=\"col-2 bg-light sidebar d-flex tinfo\">\n            <div className =\"row left-nav group1\">\n              <div className=\"col-12 left-col\">\n                <nav className=\"navbar left-nav navbar-expand navbar-light\">\n                  <ul className=\"left-nav text-left tinfo\">\n                    <li className={\"left-nav tactorinfonav-archive nav-link col col-auto tactorlink nav-link \" + (this.isActive(\"hit\")?\"activated\":\"not-activated\")}>\n                    <div className=\"row flex-nowrap\">\n                      <div className=\"col\">\n                        <div className={\"tactoricon d-flex justify-content-start\"}>\n                          <img src={hit} alt=\"\" className=\"tactorinfoicon\"/>\n                        </div>\n                      </div>\n                      <div className=\"col tactinfo\">\n                        <h4 className=\"tactinfo\">Hit</h4>\n                        <br/>\n                        <h5 className=\"tactinfo\">Tactor 1</h5><img src={link} alt=\"\" className=\"tactinfo\"/><h5 className=\"tactinfo\"> Pin 1</h5>\n                      </div>\n                    </div>\n                    </li>\n                    <li className={\"left-nav tactorinfonav-archive nav-link col col-auto tactorlink nav-link \" + (this.isActive(\"pat\")?\"activated\":\"not-activated\")}>\n                      <div className=\"row flex-nowrap\">\n                        <div className=\"col\">\n                          <div className=\"tactoricon d-flex justify-content-start\">\n                            <img src={pat} alt=\"\" className=\"tactorinfoicon\"/>\n                          </div>\n                        </div>\n                        <div className=\"col tactinfo\">\n                          <h4 className=\"tactinfo\">Pat</h4>\n                          <br/>\n                          <h5 className=\"tactinfo\">Tactor 2</h5><img src={link} alt=\"\" className=\"tactinfo\"/><h5 className=\"tactinfo\"> Pin 2</h5>\n                        </div>\n                      </div>\n                    </li>\n                    <li className={\"left-nav tactorinfonav-archive nav-link col col-auto tactorlink nav-link \" + (this.isActive(\"push\")?\"activated\":\"not-activated\")}>\n                      <div className=\"row flex-nowrap\">\n                        <div className=\"col\">\n                          <div className={\"tactoricon d-flex justify-content-start \"}>\n                            <img src={push} alt=\"\" className=\"tactorinfoicon\"/>\n                          </div>\n                        </div>\n                        <div className=\"col tactinfo\">\n                          <h4 className=\"tactinfo\">Push</h4>\n                          <br/>\n                          <h5 className=\"tactinfo\">Tactor 3</h5><img src={link} alt=\"\" className=\"tactinfo\"/><h5 className=\"tactinfo\"> Pin 3</h5>\n                        </div>\n                      </div>\n                    </li>\n                    <li className={\"left-nav tactorinfonav-archive nav-link col col-auto tactorlink nav-link \" + (this.isActive(\"rub\")?\"activated\":\"not-activated\")}>\n                      <div className=\"row flex-nowrap\">\n                        <div className=\"col\">\n                          <div className=\"tactoricon d-flex justify-content-start \">\n                            <img src={rub} alt=\"\" className=\"tactorinfoicon\"/>\n                          </div>\n                        </div>\n                        <div className=\"col tactinfo\">\n                          <h4 className=\"tactinfo\">Rub</h4>\n                          <br/>\n                          <h5 className=\"tactinfo\">Tactor 4</h5><img src={link} alt=\"\" className=\"tactinfo\"/><h5 className=\"tactinfo\"> Pin 4</h5>\n                        </div>\n                      </div>\n                    </li>\n                    <li className={\"left-nav tactorinfonav-archive nav-link col col-auto tactorlink nav-link \" + (this.isActive(\"shake\")?\"activated\":\"not-activated\")}>\n                      <div className=\"row flex-nowrap\">\n                        <div className=\"col\">\n                          <div className=\"tactoricon d-flex justify-content-start \">\n                            <img src={shake} alt=\"\" className=\"tactorinfoicon\"/>\n                          </div>\n                        </div>\n                        <div className=\"col tactinfo\">\n                          <h4 className=\"tactinfo\">Shake</h4>\n                          <br/>\n                          <h5 className=\"tactinfo\">Tactor 5</h5><img src={link} alt=\"\" className=\"tactinfo\"/><h5 className=\"tactinfo\"> Pin 5</h5>\n                        </div>\n                      </div>\n                    </li>\n                    <li className={\"left-nav tactorinfonav-archive nav-link col col-auto tactorlink nav-link \" + (this.isActive(\"squeeze\")?\"activated\":\"not-activated\")}>\n                      <div className=\"row flex-nowrap\">\n                        <div className=\"col\">\n                          <div className=\"tactoricon d-flex justify-content-start \">\n                            <img src={squeeze} alt=\"\" className=\"tactorinfoicon\"/>\n                          </div>\n                        </div>\n                        <div className=\"col tactinfo\">\n                          <h4 className=\"tactinfo\">Squeeze</h4>\n                          <br/>\n                          <h5 className=\"tactinfo\">Tactor 6</h5><img src={link} alt=\"\" className=\"tactinfo\"/><h5 className=\"tactinfo\"> Pin 6</h5>\n                        </div>\n                      </div>\n                    </li>\n                    <li className={\"left-nav tactorinfonav-archive nav-link col col-auto tactorlink nav-link \" + (this.isActive(\"stroke\")?\"activated\":\"not-activated\")}>\n                      <div className=\"row flex-nowrap\">\n                        <div className=\"col\">\n                          <div className=\"tactoricon d-flex justify-content-start \">\n                            <img src={stroke} alt=\"\" className=\"tactorinfoicon\"/>\n                          </div>\n                        </div>\n                        <div className=\"col tactinfo\">\n                          <h4 className=\"tactinfo\">Stroke</h4>\n                          <br/>\n                          <h5 className=\"tactinfo\">Tactor 7</h5><img src={link} alt=\"\" className=\"tactinfo\"/><h5 className=\"tactinfo\"> Pin 7</h5>\n                        </div>\n                      </div>\n                    </li>\n                    <li className={\"left-nav tactorinfonav-archive nav-link col col-auto tactorlink nav-link \" + (this.isActive(\"tap\")?\"activated\":\"not-activated\")}>\n                      <div className=\"row flex-nowrap\">\n                        <div className=\"col\">\n                          <div className=\"tactoricon d-flex justify-content-start\">\n                            <img src={tap} alt=\"\" className=\"tactorinfoicon\"/>\n                          </div>\n                        </div>\n                        <div className=\"col tactinfo\">\n                          <h4 className=\"tactinfo\">Tap</h4>\n                          <br/>\n                          <h5 className=\"tactinfo\">Tactor 8</h5><img src={link} alt=\"\" className=\"tactinfo\"/><h5 className=\"tactinfo\"> Pin 8</h5>\n                        </div>\n                      </div>\n                    </li>\n                  </ul>\n                </nav>\n              </div>\n            </div>\n          </div>\n        \n          <div className=\"col-10 main-content\">\n            <section className=\"main-head\">\n              <h2>Archive</h2>\n            </section>\n\n            <section className=\"archive-block\">\n              <div className=\"header row\">\n                <div className=\"title col\">My Touches</div>\n\n                <div className=\"col\">\n\n                </div>\n\n                <div className=\"col\">\n\n\n                </div>\n              </div>\n\n              <div className=\"data-block\">\n                <table>\n                  <thead>\n                    <tr>\n                      <th>Name</th>\n                      <th>Emotion</th>\n                      <th>Tactor</th>\n                      <th>Date</th>\n                      <th></th>\n                      <th></th>\n                      <th></th>\n                      <th></th>\n                    </tr>\n                  </thead>\n                    <tbody>\n                      {this.state.archiveData.map((item, i) => (\n                          <tr key={item.id}>\n                            <td>{item.name}</td>\n                            <td>{item.emotion}</td>\n                            <td>{item.tactor}</td>\n                            <td>{new Date(item.timestamp.split(\" \").join(\"T\")+\"Z\").toLocaleString('en-US', { year: 'numeric', month: 'short', day: 'numeric', hour: '2-digit', minute: '2-digit'})}</td>\n                            <td><img src={playOutline} alt=\"\" className=\"img-button\" onClick={() => toast(\"Feature not active.\")}/></td>\n                            <td><img src={settings} alt=\"\" className=\"img-button\" onClick={() => this.setFromArchive(item)}/></td>\n                            <td><img src={download} alt=\"\" className=\"img-button\" onClick={() => toast(\"Feature not active.\")}/></td>\n                            <td><img src={del} alt=\"\" className=\"img-button\" onClick={() => this.deleteFromArchive(item)}/></td>\n                          </tr>\n                        ))\n                      }\n                  </tbody>\n                </table>\n              </div>\n\n              {/* */}\n            </section>\n              \n          </div>\n        \n        </div>\n      )}\n\n</main>\n\n</section>\n<ToastContainer \ntransition={Slide}\nautoClose={4000}\nposition=\"top-right\"\nhideProgressBar={false}\nnewestOnTop\ncloseOnClick\nrtl={false}\npauseOnFocusLoss\ndraggable={false}\npauseOnHover\n/>\n</div>\n)\n\n}\n\n}\n\nexport default LeftNav;\n","/Users/akshaybaweja/Desktop/Workspace/Ran/Ran_Research/react-site/src/components/emotion.js",[],{"ruleId":"62","severity":1,"message":"63","line":4,"column":8,"nodeType":"64","messageId":"65","endLine":4,"endColumn":21},{"ruleId":"62","severity":1,"message":"66","line":5,"column":8,"nodeType":"64","messageId":"65","endLine":5,"endColumn":11},{"ruleId":"67","severity":1,"message":"68","line":6,"column":5,"nodeType":"69","endLine":6,"endColumn":76},{"ruleId":"62","severity":1,"message":"70","line":33,"column":8,"nodeType":"64","messageId":"65","endLine":33,"endColumn":20},{"ruleId":"62","severity":1,"message":"71","line":75,"column":8,"nodeType":"64","messageId":"65","endLine":75,"endColumn":15},{"ruleId":"72","severity":1,"message":"73","line":1404,"column":13,"nodeType":"69","endLine":1404,"endColumn":118},{"ruleId":"72","severity":1,"message":"73","line":1407,"column":13,"nodeType":"69","endLine":1407,"endColumn":114},{"ruleId":"72","severity":1,"message":"73","line":1410,"column":13,"nodeType":"69","endLine":1410,"endColumn":124},{"ruleId":"72","severity":1,"message":"73","line":1413,"column":13,"nodeType":"69","endLine":1413,"endColumn":119},{"ruleId":"74","severity":1,"message":"75","line":1421,"column":15,"nodeType":"76","endLine":1421,"endColumn":31},{"ruleId":"72","severity":1,"message":"73","line":1777,"column":27,"nodeType":"69","endLine":1777,"endColumn":60},{"ruleId":"72","severity":1,"message":"73","line":1793,"column":27,"nodeType":"69","endLine":1793,"endColumn":61},{"ruleId":"72","severity":1,"message":"73","line":1809,"column":27,"nodeType":"69","endLine":1809,"endColumn":105},{"ruleId":"77","severity":1,"message":"78","line":1869,"column":165,"nodeType":"79","messageId":"80","endLine":1869,"endColumn":166},{"ruleId":"77","severity":1,"message":"78","line":1877,"column":155,"nodeType":"79","messageId":"80","endLine":1877,"endColumn":156},{"ruleId":"77","severity":1,"message":"78","line":1883,"column":163,"nodeType":"79","messageId":"80","endLine":1883,"endColumn":164},{"ruleId":"77","severity":1,"message":"78","line":1889,"column":162,"nodeType":"79","messageId":"80","endLine":1889,"endColumn":163},{"ruleId":"77","severity":1,"message":"78","line":1897,"column":157,"nodeType":"79","messageId":"80","endLine":1897,"endColumn":158},{"ruleId":"77","severity":1,"message":"78","line":1903,"column":161,"nodeType":"79","messageId":"80","endLine":1903,"endColumn":162},{"ruleId":"77","severity":1,"message":"78","line":1909,"column":155,"nodeType":"79","messageId":"80","endLine":1909,"endColumn":156},{"ruleId":"77","severity":1,"message":"78","line":1915,"column":165,"nodeType":"79","messageId":"80","endLine":1915,"endColumn":166},{"ruleId":"77","severity":1,"message":"78","line":1937,"column":169,"nodeType":"79","messageId":"80","endLine":1937,"endColumn":170},{"ruleId":"77","severity":1,"message":"78","line":1945,"column":172,"nodeType":"79","messageId":"80","endLine":1945,"endColumn":173},{"ruleId":"77","severity":1,"message":"78","line":1951,"column":165,"nodeType":"79","messageId":"80","endLine":1951,"endColumn":166},{"ruleId":"77","severity":1,"message":"78","line":1957,"column":165,"nodeType":"79","messageId":"80","endLine":1957,"endColumn":166},{"ruleId":"77","severity":1,"message":"78","line":1965,"column":167,"nodeType":"79","messageId":"80","endLine":1965,"endColumn":168},{"ruleId":"77","severity":1,"message":"78","line":1971,"column":165,"nodeType":"79","messageId":"80","endLine":1971,"endColumn":166},{"ruleId":"77","severity":1,"message":"78","line":1977,"column":171,"nodeType":"79","messageId":"80","endLine":1977,"endColumn":172},{"ruleId":"77","severity":1,"message":"78","line":1983,"column":165,"nodeType":"79","messageId":"80","endLine":1983,"endColumn":166},{"ruleId":"62","severity":1,"message":"81","line":2075,"column":37,"nodeType":"64","messageId":"65","endLine":2075,"endColumn":46},{"ruleId":"72","severity":1,"message":"73","line":2214,"column":27,"nodeType":"69","endLine":2214,"endColumn":60},{"ruleId":"72","severity":1,"message":"73","line":2221,"column":27,"nodeType":"69","endLine":2221,"endColumn":61},{"ruleId":"72","severity":1,"message":"73","line":2228,"column":27,"nodeType":"69","endLine":2228,"endColumn":110},"no-unused-vars","'HomepageImage' is defined but never used.","Identifier","unusedVar","'Nav' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'pauseOutline' is defined but never used.","'Emotion' is defined but never used.","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","jsx-a11y/aria-role","Elements with ARIA roles must use a valid, non-abstract ARIA role.","JSXAttribute","no-sequences","Unexpected use of comma operator.","SequenceExpression","unexpectedCommaExpression","'amplitude' is assigned a value but never used."]